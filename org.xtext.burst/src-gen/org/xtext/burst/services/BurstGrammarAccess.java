/*
 * generated by Xtext 2.9.0
 */
package org.xtext.burst.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BurstGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.File");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//File:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConcernParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntersectionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPackageParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cENDLINETerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AbstractElement:
		//	Import | Concern | Intersection | Package | ENDLINE;
		@Override public ParserRule getRule() { return rule; }
		
		//Import | Concern | Intersection | Package | ENDLINE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }
		
		//Concern
		public RuleCall getConcernParserRuleCall_1() { return cConcernParserRuleCall_1; }
		
		//Intersection
		public RuleCall getIntersectionParserRuleCall_2() { return cIntersectionParserRuleCall_2; }
		
		//Package
		public RuleCall getPackageParserRuleCall_3() { return cPackageParserRuleCall_3; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_4() { return cENDLINETerminalRuleCall_4; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsAbstractElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cENDLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Package:
		//	'package' name=QualifiedName '{' elements+=AbstractElement* '}' ENDLINE;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName '{' elements+=AbstractElement* '}' ENDLINE
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_3_0() { return cElementsAbstractElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_5() { return cENDLINETerminalRuleCall_5; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Import:
		//	'import' importedNamespace=QualifiedName ENDLINE;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedName ENDLINE
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedName
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedName
		public RuleCall getImportedNamespaceQualifiedNameParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameParserRuleCall_1_0; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_2() { return cENDLINETerminalRuleCall_2; }
	}
	public class ConcernElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Concern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConcernAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConcernKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cENDLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Assignment cSupertypeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cSupertypeConcernCrossReference_5_2_0 = (CrossReference)cSupertypeAssignment_5_2.eContents().get(0);
		private final RuleCall cSupertypeConcernQualifiedNameParserRuleCall_5_2_0_1 = (RuleCall)cSupertypeConcernCrossReference_5_2_0.eContents().get(1);
		private final RuleCall cENDLINETerminalRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Alternatives cAlternatives_6_2 = (Alternatives)cGroup_6.eContents().get(2);
		private final Assignment cMembersAssignment_6_2_0 = (Assignment)cAlternatives_6_2.eContents().get(0);
		private final RuleCall cMembersMemberParserRuleCall_6_2_0_0 = (RuleCall)cMembersAssignment_6_2_0.eContents().get(0);
		private final Assignment cIntersectionsAssignment_6_2_1 = (Assignment)cAlternatives_6_2.eContents().get(1);
		private final RuleCall cIntersectionsIntersectionParserRuleCall_6_2_1_0 = (RuleCall)cIntersectionsAssignment_6_2_1.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final RuleCall cENDLINETerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Concern:
		//	{Concern}
		//	'concern' ENDLINE? name=ID ENDLINE? ('extends' ENDLINE? supertype=[Concern|QualifiedName] ENDLINE?)? ('{' ENDLINE?
		//	(members+=Member | intersections+=Intersection)* ENDLINE? '}')? ENDLINE;
		@Override public ParserRule getRule() { return rule; }
		
		//{Concern} 'concern' ENDLINE? name=ID ENDLINE? ('extends' ENDLINE? supertype=[Concern|QualifiedName] ENDLINE?)? ('{'
		//ENDLINE? (members+=Member | intersections+=Intersection)* ENDLINE? '}')? ENDLINE
		public Group getGroup() { return cGroup; }
		
		//{Concern}
		public Action getConcernAction_0() { return cConcernAction_0; }
		
		//'concern'
		public Keyword getConcernKeyword_1() { return cConcernKeyword_1; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_2() { return cENDLINETerminalRuleCall_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_4() { return cENDLINETerminalRuleCall_4; }
		
		//('extends' ENDLINE? supertype=[Concern|QualifiedName] ENDLINE?)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'extends'
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_5_1() { return cENDLINETerminalRuleCall_5_1; }
		
		//supertype=[Concern|QualifiedName]
		public Assignment getSupertypeAssignment_5_2() { return cSupertypeAssignment_5_2; }
		
		//[Concern|QualifiedName]
		public CrossReference getSupertypeConcernCrossReference_5_2_0() { return cSupertypeConcernCrossReference_5_2_0; }
		
		//QualifiedName
		public RuleCall getSupertypeConcernQualifiedNameParserRuleCall_5_2_0_1() { return cSupertypeConcernQualifiedNameParserRuleCall_5_2_0_1; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_5_3() { return cENDLINETerminalRuleCall_5_3; }
		
		//('{' ENDLINE? (members+=Member | intersections+=Intersection)* ENDLINE? '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_6_1() { return cENDLINETerminalRuleCall_6_1; }
		
		//(members+=Member | intersections+=Intersection)*
		public Alternatives getAlternatives_6_2() { return cAlternatives_6_2; }
		
		//members+=Member
		public Assignment getMembersAssignment_6_2_0() { return cMembersAssignment_6_2_0; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_6_2_0_0() { return cMembersMemberParserRuleCall_6_2_0_0; }
		
		//intersections+=Intersection
		public Assignment getIntersectionsAssignment_6_2_1() { return cIntersectionsAssignment_6_2_1; }
		
		//Intersection
		public RuleCall getIntersectionsIntersectionParserRuleCall_6_2_1_0() { return cIntersectionsIntersectionParserRuleCall_6_2_1_0; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_6_3() { return cENDLINETerminalRuleCall_6_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_7() { return cENDLINETerminalRuleCall_7; }
	}
	public class DestructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Destruct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDestructAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameDisposeKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLinesContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLinesContentLineParserRuleCall_3_0 = (RuleCall)cLinesContentAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Destruct:
		//	{Destruct} name='dispose' '{' linesContent+=Line* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Destruct} name='dispose' '{' linesContent+=Line* '}'
		public Group getGroup() { return cGroup; }
		
		//{Destruct}
		public Action getDestructAction_0() { return cDestructAction_0; }
		
		//name='dispose'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'dispose'
		public Keyword getNameDisposeKeyword_1_0() { return cNameDisposeKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//linesContent+=Line*
		public Assignment getLinesContentAssignment_3() { return cLinesContentAssignment_3; }
		
		//Line
		public RuleCall getLinesContentLineParserRuleCall_3_0() { return cLinesContentLineParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BuildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Build");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuildAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameNewKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLinesContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLinesContentLineParserRuleCall_3_0 = (RuleCall)cLinesContentAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Build:
		//	{Build} name='new' '{' linesContent+=Line* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Build} name='new' '{' linesContent+=Line* '}'
		public Group getGroup() { return cGroup; }
		
		//{Build}
		public Action getBuildAction_0() { return cBuildAction_0; }
		
		//name='new'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'new'
		public Keyword getNameNewKeyword_1_0() { return cNameNewKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//linesContent+=Line*
		public Assignment getLinesContentAssignment_3() { return cLinesContentAssignment_3; }
		
		//Line
		public RuleCall getLinesContentLineParserRuleCall_3_0() { return cLinesContentLineParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cConcernAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cConcernConcernCrossReference_1_0 = (CrossReference)cConcernAssignment_1.eContents().get(0);
		private final RuleCall cConcernConcernQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cConcernConcernCrossReference_1_0.eContents().get(1);
		private final RuleCall cENDLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Member:
		//	{Member} concern=[Concern|QualifiedName] ENDLINE? name=ID ENDLINE?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Member} concern=[Concern|QualifiedName] ENDLINE? name=ID ENDLINE?
		public Group getGroup() { return cGroup; }
		
		//{Member}
		public Action getMemberAction_0() { return cMemberAction_0; }
		
		//concern=[Concern|QualifiedName]
		public Assignment getConcernAssignment_1() { return cConcernAssignment_1; }
		
		//[Concern|QualifiedName]
		public CrossReference getConcernConcernCrossReference_1_0() { return cConcernConcernCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getConcernConcernQualifiedNameParserRuleCall_1_0_1() { return cConcernConcernQualifiedNameParserRuleCall_1_0_1; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_2() { return cENDLINETerminalRuleCall_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_4() { return cENDLINETerminalRuleCall_4; }
	}
	public class IntersectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Intersection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntersectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameWhenKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersMemberParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cENDLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cLinesContentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLinesContentLineParserRuleCall_6_0 = (RuleCall)cLinesContentAssignment_6.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Intersection:
		//	{Intersection} name='when' ENDLINE? members+=Member*
		//	'{' ENDLINE? linesContent+=Line* ENDLINE? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Intersection} name='when' ENDLINE? members+=Member* '{' ENDLINE? linesContent+=Line* ENDLINE? '}'
		public Group getGroup() { return cGroup; }
		
		//{Intersection}
		public Action getIntersectionAction_0() { return cIntersectionAction_0; }
		
		//name='when'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'when'
		public Keyword getNameWhenKeyword_1_0() { return cNameWhenKeyword_1_0; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_2() { return cENDLINETerminalRuleCall_2; }
		
		//members+=Member*
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_3_0() { return cMembersMemberParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_5() { return cENDLINETerminalRuleCall_5; }
		
		//linesContent+=Line*
		public Assignment getLinesContentAssignment_6() { return cLinesContentAssignment_6; }
		
		//Line
		public RuleCall getLinesContentLineParserRuleCall_6_0() { return cLinesContentLineParserRuleCall_6_0; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_7() { return cENDLINETerminalRuleCall_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstCallParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListCallParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Line:
		//	first=Call list+=Call* ENDLINE;
		@Override public ParserRule getRule() { return rule; }
		
		//first=Call list+=Call* ENDLINE
		public Group getGroup() { return cGroup; }
		
		//first=Call
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//Call
		public RuleCall getFirstCallParserRuleCall_0_0() { return cFirstCallParserRuleCall_0_0; }
		
		//list+=Call*
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//Call
		public RuleCall getListCallParserRuleCall_1_0() { return cListCallParserRuleCall_1_0; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_2() { return cENDLINETerminalRuleCall_2; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Call");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCallAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameMemberCallParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameMemberInConcernParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Call:
		//	{Call} name=MemberCall | name=MemberInConcern;
		@Override public ParserRule getRule() { return rule; }
		
		//{Call} name=MemberCall | name=MemberInConcern
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Call} name=MemberCall
		public Group getGroup_0() { return cGroup_0; }
		
		//{Call}
		public Action getCallAction_0_0() { return cCallAction_0_0; }
		
		//name=MemberCall
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//MemberCall
		public RuleCall getNameMemberCallParserRuleCall_0_1_0() { return cNameMemberCallParserRuleCall_0_1_0; }
		
		//name=MemberInConcern
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//MemberInConcern
		public RuleCall getNameMemberInConcernParserRuleCall_1_0() { return cNameMemberInConcernParserRuleCall_1_0; }
	}
	public class MemberCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.MemberCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemberCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameMemberCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameMemberIDTerminalRuleCall_1_0_1 = (RuleCall)cNameMemberCrossReference_1_0.eContents().get(1);
		
		//MemberCall:
		//	{MemberCall} name=[Member];
		@Override public ParserRule getRule() { return rule; }
		
		//{MemberCall} name=[Member]
		public Group getGroup() { return cGroup; }
		
		//{MemberCall}
		public Action getMemberCallAction_0() { return cMemberCallAction_0; }
		
		//name=[Member]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Member]
		public CrossReference getNameMemberCrossReference_1_0() { return cNameMemberCrossReference_1_0; }
		
		//ID
		public RuleCall getNameMemberIDTerminalRuleCall_1_0_1() { return cNameMemberIDTerminalRuleCall_1_0_1; }
	}
	public class MemberInConcernElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.MemberInConcern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemberInConcernAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetConcernCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetConcernIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetConcernCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNameMemberCrossReference_3_0 = (CrossReference)cNameAssignment_3.eContents().get(0);
		private final RuleCall cNameMemberIDTerminalRuleCall_3_0_1 = (RuleCall)cNameMemberCrossReference_3_0.eContents().get(1);
		
		//MemberInConcern:
		//	{MemberInConcern} target=[Concern] '.' name=[Member];
		@Override public ParserRule getRule() { return rule; }
		
		//{MemberInConcern} target=[Concern] '.' name=[Member]
		public Group getGroup() { return cGroup; }
		
		//{MemberInConcern}
		public Action getMemberInConcernAction_0() { return cMemberInConcernAction_0; }
		
		//target=[Concern]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[Concern]
		public CrossReference getTargetConcernCrossReference_1_0() { return cTargetConcernCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetConcernIDTerminalRuleCall_1_0_1() { return cTargetConcernIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//name=[Member]
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//[Member]
		public CrossReference getNameMemberCrossReference_3_0() { return cNameMemberCrossReference_3_0; }
		
		//ID
		public RuleCall getNameMemberIDTerminalRuleCall_3_0_1() { return cNameMemberIDTerminalRuleCall_3_0_1; }
	}
	
	
	private final FileElements pFile;
	private final AbstractElementElements pAbstractElement;
	private final PackageElements pPackage;
	private final QualifiedNameElements pQualifiedName;
	private final ImportElements pImport;
	private final ConcernElements pConcern;
	private final DestructElements pDestruct;
	private final BuildElements pBuild;
	private final MemberElements pMember;
	private final IntersectionElements pIntersection;
	private final LineElements pLine;
	private final CallElements pCall;
	private final MemberCallElements pMemberCall;
	private final MemberInConcernElements pMemberInConcern;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tENDLINE;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public BurstGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pFile = new FileElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pPackage = new PackageElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pImport = new ImportElements();
		this.pConcern = new ConcernElements();
		this.pDestruct = new DestructElements();
		this.pBuild = new BuildElements();
		this.pMember = new MemberElements();
		this.pIntersection = new IntersectionElements();
		this.pLine = new LineElements();
		this.pCall = new CallElements();
		this.pMemberCall = new MemberCallElements();
		this.pMemberInConcern = new MemberInConcernElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.WS");
		this.tENDLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ENDLINE");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.burst.Burst".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//File:
	//	elements+=AbstractElement*;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//AbstractElement:
	//	Import | Concern | Intersection | Package | ENDLINE;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//Package:
	//	'package' name=QualifiedName '{' elements+=AbstractElement* '}' ENDLINE;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedName ENDLINE;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Concern:
	//	{Concern}
	//	'concern' ENDLINE? name=ID ENDLINE? ('extends' ENDLINE? supertype=[Concern|QualifiedName] ENDLINE?)? ('{' ENDLINE?
	//	(members+=Member | intersections+=Intersection)* ENDLINE? '}')? ENDLINE;
	public ConcernElements getConcernAccess() {
		return pConcern;
	}
	
	public ParserRule getConcernRule() {
		return getConcernAccess().getRule();
	}
	
	//Destruct:
	//	{Destruct} name='dispose' '{' linesContent+=Line* '}';
	public DestructElements getDestructAccess() {
		return pDestruct;
	}
	
	public ParserRule getDestructRule() {
		return getDestructAccess().getRule();
	}
	
	//Build:
	//	{Build} name='new' '{' linesContent+=Line* '}';
	public BuildElements getBuildAccess() {
		return pBuild;
	}
	
	public ParserRule getBuildRule() {
		return getBuildAccess().getRule();
	}
	
	//Member:
	//	{Member} concern=[Concern|QualifiedName] ENDLINE? name=ID ENDLINE?;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//Intersection:
	//	{Intersection} name='when' ENDLINE? members+=Member*
	//	'{' ENDLINE? linesContent+=Line* ENDLINE? '}';
	public IntersectionElements getIntersectionAccess() {
		return pIntersection;
	}
	
	public ParserRule getIntersectionRule() {
		return getIntersectionAccess().getRule();
	}
	
	//Line:
	//	first=Call list+=Call* ENDLINE;
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//Call:
	//	{Call} name=MemberCall | name=MemberInConcern;
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//MemberCall:
	//	{MemberCall} name=[Member];
	public MemberCallElements getMemberCallAccess() {
		return pMemberCall;
	}
	
	public ParserRule getMemberCallRule() {
		return getMemberCallAccess().getRule();
	}
	
	//MemberInConcern:
	//	{MemberInConcern} target=[Concern] '.' name=[Member];
	public MemberInConcernElements getMemberInConcernAccess() {
		return pMemberInConcern;
	}
	
	public ParserRule getMemberInConcernRule() {
		return getMemberInConcernAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ENDLINE:
	//	'\r'? '\n';
	public TerminalRule getENDLINERule() {
		return tENDLINE;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
