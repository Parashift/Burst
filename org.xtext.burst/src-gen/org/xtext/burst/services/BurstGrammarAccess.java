/*
 * generated by Xtext 2.10.0
 */
package org.xtext.burst.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BurstGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFileAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_2_0_0 = (RuleCall)cImportsAssignment_2_0.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsFileElementParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//File:
		//	{File} ENDLINE* (Imports+=Import ENDLINE*)* (elements+=FileElement ENDLINE*)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{File} ENDLINE* (Imports+=Import ENDLINE*)* (elements+=FileElement ENDLINE*)*
		public Group getGroup() { return cGroup; }
		
		//{File}
		public Action getFileAction_0() { return cFileAction_0; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_1() { return cENDLINETerminalRuleCall_1; }
		
		//(Imports+=Import ENDLINE*)*
		public Group getGroup_2() { return cGroup_2; }
		
		//Imports+=Import
		public Assignment getImportsAssignment_2_0() { return cImportsAssignment_2_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_2_0_0() { return cImportsImportParserRuleCall_2_0_0; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_2_1() { return cENDLINETerminalRuleCall_2_1; }
		
		//(elements+=FileElement ENDLINE*)*
		public Group getGroup_3() { return cGroup_3; }
		
		//elements+=FileElement
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }
		
		//FileElement
		public RuleCall getElementsFileElementParserRuleCall_3_0_0() { return cElementsFileElementParserRuleCall_3_0_0; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_3_1() { return cENDLINETerminalRuleCall_3_1; }
	}
	public class FileElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.FileElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRolesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPackageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FileElement:
		//	Roles | Package;
		@Override public ParserRule getRule() { return rule; }
		
		//Roles | Package
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Roles
		public RuleCall getRolesParserRuleCall_0() { return cRolesParserRuleCall_0; }
		
		//Package
		public RuleCall getPackageParserRuleCall_1() { return cPackageParserRuleCall_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		
		//Import:
		//	{Import}
		//	'import' importedNamespace=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//{Import} 'import' importedNamespace=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//{Import}
		public Action getImportAction_0() { return cImportAction_0; }
		
		//'import'
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }
		
		//importedNamespace=QualifiedName
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }
		
		//QualifiedName
		public RuleCall getImportedNamespaceQualifiedNameParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameParserRuleCall_2_0; }
	}
	public class RolesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Roles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRoleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Roles:
		//	{Role}
		//	'role' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Role} 'role' name=ID
		public Group getGroup() { return cGroup; }
		
		//{Role}
		public Action getRoleAction_0() { return cRoleAction_0; }
		
		//'role'
		public Keyword getRoleKeyword_1() { return cRoleKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cENDLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cElementsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cElementsPackageElementParserRuleCall_6_0_0 = (RuleCall)cElementsAssignment_6_0.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Package:
		//	{Package}
		//	'package' name=QualifiedName ENDLINE* '{' ENDLINE* (elements+=PackageElement ENDLINE*)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Package} 'package' name=QualifiedName ENDLINE* '{' ENDLINE* (elements+=PackageElement ENDLINE*)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Package}
		public Action getPackageAction_0() { return cPackageAction_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_3() { return cENDLINETerminalRuleCall_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_5() { return cENDLINETerminalRuleCall_5; }
		
		//(elements+=PackageElement ENDLINE*)*
		public Group getGroup_6() { return cGroup_6; }
		
		//elements+=PackageElement
		public Assignment getElementsAssignment_6_0() { return cElementsAssignment_6_0; }
		
		//PackageElement
		public RuleCall getElementsPackageElementParserRuleCall_6_0_0() { return cElementsPackageElementParserRuleCall_6_0_0; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_6_1() { return cENDLINETerminalRuleCall_6_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class PackageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.PackageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConcernParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTemplateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRuleIntersectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PackageElement:
		//	Concern | Template | RuleIntersect;
		@Override public ParserRule getRule() { return rule; }
		
		//Concern | Template | RuleIntersect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Concern
		public RuleCall getConcernParserRuleCall_0() { return cConcernParserRuleCall_0; }
		
		//Template
		public RuleCall getTemplateParserRuleCall_1() { return cTemplateParserRuleCall_1; }
		
		//RuleIntersect
		public RuleCall getRuleIntersectParserRuleCall_2() { return cRuleIntersectParserRuleCall_2; }
	}
	public class ConcernElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Concern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConcernAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConcernKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cENDLINETerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cENDLINETerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Assignment cElementsAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cElementsConcernElementParserRuleCall_3_3_0_0 = (RuleCall)cElementsAssignment_3_3_0.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_3_3_1 = (RuleCall)cGroup_3_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//Concern:
		//	{Concern}
		//	'concern' name=ID (ENDLINE* '{' ENDLINE* (elements+=ConcernElement ENDLINE+)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Concern} 'concern' name=ID (ENDLINE* '{' ENDLINE* (elements+=ConcernElement ENDLINE+)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{Concern}
		public Action getConcernAction_0() { return cConcernAction_0; }
		
		//'concern'
		public Keyword getConcernKeyword_1() { return cConcernKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(ENDLINE* '{' ENDLINE* (elements+=ConcernElement ENDLINE+)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_3_0() { return cENDLINETerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_3_2() { return cENDLINETerminalRuleCall_3_2; }
		
		//(elements+=ConcernElement ENDLINE+)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//elements+=ConcernElement
		public Assignment getElementsAssignment_3_3_0() { return cElementsAssignment_3_3_0; }
		
		//ConcernElement
		public RuleCall getElementsConcernElementParserRuleCall_3_3_0_0() { return cElementsConcernElementParserRuleCall_3_3_0_0; }
		
		//ENDLINE+
		public RuleCall getENDLINETerminalRuleCall_3_3_1() { return cENDLINETerminalRuleCall_3_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
	}
	public class TemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Template");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTemplateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTemplateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTemplateArgumentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTemplateArgumentsConcernCrossReference_4_0 = (CrossReference)cTemplateArgumentsAssignment_4.eContents().get(0);
		private final RuleCall cTemplateArgumentsConcernIDTerminalRuleCall_4_0_1 = (RuleCall)cTemplateArgumentsConcernCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTemplateArgumentsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cTemplateArgumentsConcernCrossReference_5_1_0 = (CrossReference)cTemplateArgumentsAssignment_5_1.eContents().get(0);
		private final RuleCall cTemplateArgumentsConcernIDTerminalRuleCall_5_1_0_1 = (RuleCall)cTemplateArgumentsConcernCrossReference_5_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cENDLINETerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final RuleCall cENDLINETerminalRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Assignment cElementsAssignment_7_3_0 = (Assignment)cGroup_7_3.eContents().get(0);
		private final RuleCall cElementsConcernElementParserRuleCall_7_3_0_0 = (RuleCall)cElementsAssignment_7_3_0.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_7_3_1 = (RuleCall)cGroup_7_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		
		//Template:
		//	{Template}
		//	'template' name=ID '<' templateArguments+=[Concern] (',' templateArguments+=[Concern])* '>' (ENDLINE* '{' ENDLINE*
		//	(elements+=ConcernElement ENDLINE+)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Template} 'template' name=ID '<' templateArguments+=[Concern] (',' templateArguments+=[Concern])* '>' (ENDLINE* '{'
		//ENDLINE* (elements+=ConcernElement ENDLINE+)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{Template}
		public Action getTemplateAction_0() { return cTemplateAction_0; }
		
		//'template'
		public Keyword getTemplateKeyword_1() { return cTemplateKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
		
		//templateArguments+=[Concern]
		public Assignment getTemplateArgumentsAssignment_4() { return cTemplateArgumentsAssignment_4; }
		
		//[Concern]
		public CrossReference getTemplateArgumentsConcernCrossReference_4_0() { return cTemplateArgumentsConcernCrossReference_4_0; }
		
		//ID
		public RuleCall getTemplateArgumentsConcernIDTerminalRuleCall_4_0_1() { return cTemplateArgumentsConcernIDTerminalRuleCall_4_0_1; }
		
		//(',' templateArguments+=[Concern])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//templateArguments+=[Concern]
		public Assignment getTemplateArgumentsAssignment_5_1() { return cTemplateArgumentsAssignment_5_1; }
		
		//[Concern]
		public CrossReference getTemplateArgumentsConcernCrossReference_5_1_0() { return cTemplateArgumentsConcernCrossReference_5_1_0; }
		
		//ID
		public RuleCall getTemplateArgumentsConcernIDTerminalRuleCall_5_1_0_1() { return cTemplateArgumentsConcernIDTerminalRuleCall_5_1_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
		
		//(ENDLINE* '{' ENDLINE* (elements+=ConcernElement ENDLINE+)* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_7_0() { return cENDLINETerminalRuleCall_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_7_2() { return cENDLINETerminalRuleCall_7_2; }
		
		//(elements+=ConcernElement ENDLINE+)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//elements+=ConcernElement
		public Assignment getElementsAssignment_7_3_0() { return cElementsAssignment_7_3_0; }
		
		//ConcernElement
		public RuleCall getElementsConcernElementParserRuleCall_7_3_0_0() { return cElementsConcernElementParserRuleCall_7_3_0_0; }
		
		//ENDLINE+
		public RuleCall getENDLINETerminalRuleCall_7_3_1() { return cENDLINETerminalRuleCall_7_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
	}
	public class ConcernElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ConcernElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleIntersectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConcernElement:
		//	Member | RuleIntersect;
		@Override public ParserRule getRule() { return rule; }
		
		//Member | RuleIntersect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Member
		public RuleCall getMemberParserRuleCall_0() { return cMemberParserRuleCall_0; }
		
		//RuleIntersect
		public RuleCall getRuleIntersectParserRuleCall_1() { return cRuleIntersectParserRuleCall_1; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cHeritFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHeritFromIsKeyword_1_0 = (Keyword)cHeritFromAssignment_1.eContents().get(0);
		private final Assignment cConcernAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cConcernConcernCrossReference_2_0 = (CrossReference)cConcernAssignment_2.eContents().get(0);
		private final RuleCall cConcernConcernQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cConcernConcernCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Member:
		//	{Member} heritFrom?='is'? concern=[Concern|QualifiedName] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Member} heritFrom?='is'? concern=[Concern|QualifiedName] name=ID
		public Group getGroup() { return cGroup; }
		
		//{Member}
		public Action getMemberAction_0() { return cMemberAction_0; }
		
		//heritFrom?='is'?
		public Assignment getHeritFromAssignment_1() { return cHeritFromAssignment_1; }
		
		//'is'
		public Keyword getHeritFromIsKeyword_1_0() { return cHeritFromIsKeyword_1_0; }
		
		//concern=[Concern|QualifiedName]
		public Assignment getConcernAssignment_2() { return cConcernAssignment_2; }
		
		//[Concern|QualifiedName]
		public CrossReference getConcernConcernCrossReference_2_0() { return cConcernConcernCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getConcernConcernQualifiedNameParserRuleCall_2_0_1() { return cConcernConcernQualifiedNameParserRuleCall_2_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class RuleIntersectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.RuleIntersect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntersectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameWhenKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsParameterParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cENDLINETerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cAlternatives_4_1.eContents().get(0);
		private final Keyword cAndKeyword_4_1_1 = (Keyword)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cENDLINETerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Assignment cParamsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cParamsParameterParserRuleCall_4_3_0 = (RuleCall)cParamsAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Assignment cParamsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cParamsWithParameterParserRuleCall_5_2_0 = (RuleCall)cParamsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final RuleCall cENDLINETerminalRuleCall_5_3_0 = (RuleCall)cGroup_5_3.eContents().get(0);
		private final Alternatives cAlternatives_5_3_1 = (Alternatives)cGroup_5_3.eContents().get(1);
		private final Keyword cCommaKeyword_5_3_1_0 = (Keyword)cAlternatives_5_3_1.eContents().get(0);
		private final Keyword cAndKeyword_5_3_1_1 = (Keyword)cAlternatives_5_3_1.eContents().get(1);
		private final RuleCall cENDLINETerminalRuleCall_5_3_2 = (RuleCall)cGroup_5_3.eContents().get(2);
		private final Assignment cParamsAssignment_5_3_3 = (Assignment)cGroup_5_3.eContents().get(3);
		private final RuleCall cParamsWithParameterParserRuleCall_5_3_3_0 = (RuleCall)cParamsAssignment_5_3_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cENDLINETerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cLinesAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cLinesLineParserRuleCall_8_0_0 = (RuleCall)cLinesAssignment_8_0.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//RuleIntersect:
		//	{Intersection} name='when' ENDLINE* params+=Parameter (ENDLINE* (',' | 'and') ENDLINE* params+=Parameter)* ('with'
		//	ENDLINE* params+=WithParameter (ENDLINE* (',' | 'and') ENDLINE* params+=WithParameter)*)?
		//	'{' ENDLINE* (lines+=Line ENDLINE+)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Intersection} name='when' ENDLINE* params+=Parameter (ENDLINE* (',' | 'and') ENDLINE* params+=Parameter)* ('with'
		//ENDLINE* params+=WithParameter (ENDLINE* (',' | 'and') ENDLINE* params+=WithParameter)*)? '{' ENDLINE* (lines+=Line
		//ENDLINE+)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Intersection}
		public Action getIntersectionAction_0() { return cIntersectionAction_0; }
		
		//name='when'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'when'
		public Keyword getNameWhenKeyword_1_0() { return cNameWhenKeyword_1_0; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_2() { return cENDLINETerminalRuleCall_2; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_0() { return cParamsParameterParserRuleCall_3_0; }
		
		//(ENDLINE* (',' | 'and') ENDLINE* params+=Parameter)*
		public Group getGroup_4() { return cGroup_4; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_4_0() { return cENDLINETerminalRuleCall_4_0; }
		
		//(',' | 'and')
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//'and'
		public Keyword getAndKeyword_4_1_1() { return cAndKeyword_4_1_1; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_4_2() { return cENDLINETerminalRuleCall_4_2; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_4_3() { return cParamsAssignment_4_3; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_3_0() { return cParamsParameterParserRuleCall_4_3_0; }
		
		//('with' ENDLINE* params+=WithParameter (ENDLINE* (',' | 'and') ENDLINE* params+=WithParameter)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'with'
		public Keyword getWithKeyword_5_0() { return cWithKeyword_5_0; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_5_1() { return cENDLINETerminalRuleCall_5_1; }
		
		//params+=WithParameter
		public Assignment getParamsAssignment_5_2() { return cParamsAssignment_5_2; }
		
		//WithParameter
		public RuleCall getParamsWithParameterParserRuleCall_5_2_0() { return cParamsWithParameterParserRuleCall_5_2_0; }
		
		//(ENDLINE* (',' | 'and') ENDLINE* params+=WithParameter)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_5_3_0() { return cENDLINETerminalRuleCall_5_3_0; }
		
		//(',' | 'and')
		public Alternatives getAlternatives_5_3_1() { return cAlternatives_5_3_1; }
		
		//','
		public Keyword getCommaKeyword_5_3_1_0() { return cCommaKeyword_5_3_1_0; }
		
		//'and'
		public Keyword getAndKeyword_5_3_1_1() { return cAndKeyword_5_3_1_1; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_5_3_2() { return cENDLINETerminalRuleCall_5_3_2; }
		
		//params+=WithParameter
		public Assignment getParamsAssignment_5_3_3() { return cParamsAssignment_5_3_3; }
		
		//WithParameter
		public RuleCall getParamsWithParameterParserRuleCall_5_3_3_0() { return cParamsWithParameterParserRuleCall_5_3_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_7() { return cENDLINETerminalRuleCall_7; }
		
		//(lines+=Line ENDLINE+)*
		public Group getGroup_8() { return cGroup_8; }
		
		//lines+=Line
		public Assignment getLinesAssignment_8_0() { return cLinesAssignment_8_0; }
		
		//Line
		public RuleCall getLinesLineParserRuleCall_8_0_0() { return cLinesLineParserRuleCall_8_0_0; }
		
		//ENDLINE+
		public RuleCall getENDLINETerminalRuleCall_8_1() { return cENDLINETerminalRuleCall_8_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class LocaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Locale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocaleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeConcernCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeConcernQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeConcernCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Locale:
		//	{Locale}
		//	'new' type=[Concern|QualifiedName] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Locale} 'new' type=[Concern|QualifiedName] name=ID
		public Group getGroup() { return cGroup; }
		
		//{Locale}
		public Action getLocaleAction_0() { return cLocaleAction_0; }
		
		//'new'
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }
		
		//type=[Concern|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Concern|QualifiedName]
		public CrossReference getTypeConcernCrossReference_2_0() { return cTypeConcernCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getTypeConcernQualifiedNameParserRuleCall_2_0_1() { return cTypeConcernQualifiedNameParserRuleCall_2_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeConcernCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeConcernQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeConcernCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cUsageAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cUsageColonKeyword_3_0_0 = (Keyword)cUsageAssignment_3_0.eContents().get(0);
		private final Assignment cRoleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRoleRoleCrossReference_3_1_0 = (CrossReference)cRoleAssignment_3_1.eContents().get(0);
		private final RuleCall cRoleRoleIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRoleRoleCrossReference_3_1_0.eContents().get(1);
		
		//Parameter:
		//	{Parameter} type=[Concern|QualifiedName] name=ID (usage?=':' role=[Role])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter} type=[Concern|QualifiedName] name=ID (usage?=':' role=[Role])?
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//type=[Concern|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Concern|QualifiedName]
		public CrossReference getTypeConcernCrossReference_1_0() { return cTypeConcernCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTypeConcernQualifiedNameParserRuleCall_1_0_1() { return cTypeConcernQualifiedNameParserRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(usage?=':' role=[Role])?
		public Group getGroup_3() { return cGroup_3; }
		
		//usage?=':'
		public Assignment getUsageAssignment_3_0() { return cUsageAssignment_3_0; }
		
		//':'
		public Keyword getUsageColonKeyword_3_0_0() { return cUsageColonKeyword_3_0_0; }
		
		//role=[Role]
		public Assignment getRoleAssignment_3_1() { return cRoleAssignment_3_1; }
		
		//[Role]
		public CrossReference getRoleRoleCrossReference_3_1_0() { return cRoleRoleCrossReference_3_1_0; }
		
		//ID
		public RuleCall getRoleRoleIDTerminalRuleCall_3_1_0_1() { return cRoleRoleIDTerminalRuleCall_3_1_0_1; }
	}
	public class WithParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.WithParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWithParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameConcernCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameConcernQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cNameConcernCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cUsageAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cUsageColonKeyword_2_0_0 = (Keyword)cUsageAssignment_2_0.eContents().get(0);
		private final Assignment cRoleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRoleRoleCrossReference_2_1_0 = (CrossReference)cRoleAssignment_2_1.eContents().get(0);
		private final RuleCall cRoleRoleIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRoleRoleCrossReference_2_1_0.eContents().get(1);
		
		//WithParameter:
		//	{WithParameter} name=[Concern|QualifiedName] (usage?=':' role=[Role])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{WithParameter} name=[Concern|QualifiedName] (usage?=':' role=[Role])?
		public Group getGroup() { return cGroup; }
		
		//{WithParameter}
		public Action getWithParameterAction_0() { return cWithParameterAction_0; }
		
		//name=[Concern|QualifiedName]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Concern|QualifiedName]
		public CrossReference getNameConcernCrossReference_1_0() { return cNameConcernCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getNameConcernQualifiedNameParserRuleCall_1_0_1() { return cNameConcernQualifiedNameParserRuleCall_1_0_1; }
		
		//(usage?=':' role=[Role])?
		public Group getGroup_2() { return cGroup_2; }
		
		//usage?=':'
		public Assignment getUsageAssignment_2_0() { return cUsageAssignment_2_0; }
		
		//':'
		public Keyword getUsageColonKeyword_2_0_0() { return cUsageColonKeyword_2_0_0; }
		
		//role=[Role]
		public Assignment getRoleAssignment_2_1() { return cRoleAssignment_2_1; }
		
		//[Role]
		public CrossReference getRoleRoleCrossReference_2_1_0() { return cRoleRoleCrossReference_2_1_0; }
		
		//ID
		public RuleCall getRoleRoleIDTerminalRuleCall_2_1_0_1() { return cRoleRoleIDTerminalRuleCall_2_1_0_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWithParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLocaleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConcernParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Variable:
		//	Member | Parameter | WithParameter | Locale | Concern;
		@Override public ParserRule getRule() { return rule; }
		
		//Member | Parameter | WithParameter | Locale | Concern
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Member
		public RuleCall getMemberParserRuleCall_0() { return cMemberParserRuleCall_0; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
		
		//WithParameter
		public RuleCall getWithParameterParserRuleCall_2() { return cWithParameterParserRuleCall_2; }
		
		//Locale
		public RuleCall getLocaleParserRuleCall_3() { return cLocaleParserRuleCall_3; }
		
		//Concern
		public RuleCall getConcernParserRuleCall_4() { return cConcernParserRuleCall_4; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Line");
		private final RuleCall cCallExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Line:
		//	CallExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//CallExpr
		public RuleCall getCallExprParserRuleCall() { return cCallExprParserRuleCall; }
	}
	public class CallExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.CallExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContentCallParserRuleCall_0_0 = (RuleCall)cContentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cEqualityAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cEqualityEqualsSignKeyword_1_0_0 = (Keyword)cEqualityAssignment_1_0.eContents().get(0);
		private final Assignment cSourceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSourceCallParserRuleCall_1_1_0 = (RuleCall)cSourceAssignment_1_1.eContents().get(0);
		
		//CallExpr:
		//	content+=Call+ (equality?='=' source+=Call+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//content+=Call+ (equality?='=' source+=Call+)?
		public Group getGroup() { return cGroup; }
		
		//content+=Call+
		public Assignment getContentAssignment_0() { return cContentAssignment_0; }
		
		//Call
		public RuleCall getContentCallParserRuleCall_0_0() { return cContentCallParserRuleCall_0_0; }
		
		//(equality?='=' source+=Call+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//equality?='='
		public Assignment getEqualityAssignment_1_0() { return cEqualityAssignment_1_0; }
		
		//'='
		public Keyword getEqualityEqualsSignKeyword_1_0_0() { return cEqualityEqualsSignKeyword_1_0_0; }
		
		//source+=Call+
		public Assignment getSourceAssignment_1_1() { return cSourceAssignment_1_1; }
		
		//Call
		public RuleCall getSourceCallParserRuleCall_1_1_0() { return cSourceCallParserRuleCall_1_1_0; }
	}
	public class SubCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.SubCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameCallExprParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SubCall:
		//	{SubCall}
		//	'(' name=CallExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{SubCall} '(' name=CallExpr ')'
		public Group getGroup() { return cGroup; }
		
		//{SubCall}
		public Action getSubCallAction_0() { return cSubCallAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=CallExpr
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//CallExpr
		public RuleCall getNameCallExprParserRuleCall_2_0() { return cNameCallExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Call");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocaleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAccessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSubCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Call:
		//	Locale | Access | SubCall;
		@Override public ParserRule getRule() { return rule; }
		
		//Locale | Access | SubCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Locale
		public RuleCall getLocaleParserRuleCall_0() { return cLocaleParserRuleCall_0; }
		
		//Access
		public RuleCall getAccessParserRuleCall_1() { return cAccessParserRuleCall_1; }
		
		//SubCall
		public RuleCall getSubCallParserRuleCall_2() { return cSubCallParserRuleCall_2; }
	}
	public class AccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Access");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAccessAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameVariableCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cNameVariableCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMembersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cMembersMemberCrossReference_2_1_0 = (CrossReference)cMembersAssignment_2_1.eContents().get(0);
		private final RuleCall cMembersMemberIDTerminalRuleCall_2_1_0_1 = (RuleCall)cMembersMemberCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRoleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRoleRoleCrossReference_3_1_0 = (CrossReference)cRoleAssignment_3_1.eContents().get(0);
		private final RuleCall cRoleRoleIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRoleRoleCrossReference_3_1_0.eContents().get(1);
		
		//Access:
		//	{Access} name=[Variable] ('.' members+=[Member])* (':' role=[Role])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Access} name=[Variable] ('.' members+=[Member])* (':' role=[Role])?
		public Group getGroup() { return cGroup; }
		
		//{Access}
		public Action getAccessAction_0() { return cAccessAction_0; }
		
		//name=[Variable]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Variable]
		public CrossReference getNameVariableCrossReference_1_0() { return cNameVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getNameVariableIDTerminalRuleCall_1_0_1() { return cNameVariableIDTerminalRuleCall_1_0_1; }
		
		//('.' members+=[Member])*
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//members+=[Member]
		public Assignment getMembersAssignment_2_1() { return cMembersAssignment_2_1; }
		
		//[Member]
		public CrossReference getMembersMemberCrossReference_2_1_0() { return cMembersMemberCrossReference_2_1_0; }
		
		//ID
		public RuleCall getMembersMemberIDTerminalRuleCall_2_1_0_1() { return cMembersMemberIDTerminalRuleCall_2_1_0_1; }
		
		//(':' role=[Role])?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//role=[Role]
		public Assignment getRoleAssignment_3_1() { return cRoleAssignment_3_1; }
		
		//[Role]
		public CrossReference getRoleRoleCrossReference_3_1_0() { return cRoleRoleCrossReference_3_1_0; }
		
		//ID
		public RuleCall getRoleRoleIDTerminalRuleCall_3_1_0_1() { return cRoleRoleIDTerminalRuleCall_3_1_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// * 
		//
		//Destruct: {Destruct}
		//	name='dispose' '{' linesContent+=(Line)* '}' ; 
		//
		//Build: {Build}
		//	name='new' '{' linesContent+=(Line)* '}' ;
		//
		//
		// * / QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final FileElements pFile;
	private final FileElementElements pFileElement;
	private final ImportElements pImport;
	private final RolesElements pRoles;
	private final PackageElements pPackage;
	private final PackageElementElements pPackageElement;
	private final ConcernElements pConcern;
	private final TemplateElements pTemplate;
	private final ConcernElementElements pConcernElement;
	private final MemberElements pMember;
	private final RuleIntersectElements pRuleIntersect;
	private final LocaleElements pLocale;
	private final ParameterElements pParameter;
	private final WithParameterElements pWithParameter;
	private final VariableElements pVariable;
	private final LineElements pLine;
	private final CallExprElements pCallExpr;
	private final SubCallElements pSubCall;
	private final CallElements pCall;
	private final AccessElements pAccess;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tENDLINE;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public BurstGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pFile = new FileElements();
		this.pFileElement = new FileElementElements();
		this.pImport = new ImportElements();
		this.pRoles = new RolesElements();
		this.pPackage = new PackageElements();
		this.pPackageElement = new PackageElementElements();
		this.pConcern = new ConcernElements();
		this.pTemplate = new TemplateElements();
		this.pConcernElement = new ConcernElementElements();
		this.pMember = new MemberElements();
		this.pRuleIntersect = new RuleIntersectElements();
		this.pLocale = new LocaleElements();
		this.pParameter = new ParameterElements();
		this.pWithParameter = new WithParameterElements();
		this.pVariable = new VariableElements();
		this.pLine = new LineElements();
		this.pCallExpr = new CallExprElements();
		this.pSubCall = new SubCallElements();
		this.pCall = new CallElements();
		this.pAccess = new AccessElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.WS");
		this.tENDLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ENDLINE");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.burst.Burst".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//File:
	//	{File} ENDLINE* (Imports+=Import ENDLINE*)* (elements+=FileElement ENDLINE*)*;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//FileElement:
	//	Roles | Package;
	public FileElementElements getFileElementAccess() {
		return pFileElement;
	}
	
	public ParserRule getFileElementRule() {
		return getFileElementAccess().getRule();
	}
	
	//Import:
	//	{Import}
	//	'import' importedNamespace=QualifiedName;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Roles:
	//	{Role}
	//	'role' name=ID;
	public RolesElements getRolesAccess() {
		return pRoles;
	}
	
	public ParserRule getRolesRule() {
		return getRolesAccess().getRule();
	}
	
	//Package:
	//	{Package}
	//	'package' name=QualifiedName ENDLINE* '{' ENDLINE* (elements+=PackageElement ENDLINE*)* '}';
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//PackageElement:
	//	Concern | Template | RuleIntersect;
	public PackageElementElements getPackageElementAccess() {
		return pPackageElement;
	}
	
	public ParserRule getPackageElementRule() {
		return getPackageElementAccess().getRule();
	}
	
	//Concern:
	//	{Concern}
	//	'concern' name=ID (ENDLINE* '{' ENDLINE* (elements+=ConcernElement ENDLINE+)* '}')?;
	public ConcernElements getConcernAccess() {
		return pConcern;
	}
	
	public ParserRule getConcernRule() {
		return getConcernAccess().getRule();
	}
	
	//Template:
	//	{Template}
	//	'template' name=ID '<' templateArguments+=[Concern] (',' templateArguments+=[Concern])* '>' (ENDLINE* '{' ENDLINE*
	//	(elements+=ConcernElement ENDLINE+)* '}')?;
	public TemplateElements getTemplateAccess() {
		return pTemplate;
	}
	
	public ParserRule getTemplateRule() {
		return getTemplateAccess().getRule();
	}
	
	//ConcernElement:
	//	Member | RuleIntersect;
	public ConcernElementElements getConcernElementAccess() {
		return pConcernElement;
	}
	
	public ParserRule getConcernElementRule() {
		return getConcernElementAccess().getRule();
	}
	
	//Member:
	//	{Member} heritFrom?='is'? concern=[Concern|QualifiedName] name=ID;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//RuleIntersect:
	//	{Intersection} name='when' ENDLINE* params+=Parameter (ENDLINE* (',' | 'and') ENDLINE* params+=Parameter)* ('with'
	//	ENDLINE* params+=WithParameter (ENDLINE* (',' | 'and') ENDLINE* params+=WithParameter)*)?
	//	'{' ENDLINE* (lines+=Line ENDLINE+)* '}';
	public RuleIntersectElements getRuleIntersectAccess() {
		return pRuleIntersect;
	}
	
	public ParserRule getRuleIntersectRule() {
		return getRuleIntersectAccess().getRule();
	}
	
	//Locale:
	//	{Locale}
	//	'new' type=[Concern|QualifiedName] name=ID;
	public LocaleElements getLocaleAccess() {
		return pLocale;
	}
	
	public ParserRule getLocaleRule() {
		return getLocaleAccess().getRule();
	}
	
	//Parameter:
	//	{Parameter} type=[Concern|QualifiedName] name=ID (usage?=':' role=[Role])?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//WithParameter:
	//	{WithParameter} name=[Concern|QualifiedName] (usage?=':' role=[Role])?;
	public WithParameterElements getWithParameterAccess() {
		return pWithParameter;
	}
	
	public ParserRule getWithParameterRule() {
		return getWithParameterAccess().getRule();
	}
	
	//Variable:
	//	Member | Parameter | WithParameter | Locale | Concern;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Line:
	//	CallExpr;
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//CallExpr:
	//	content+=Call+ (equality?='=' source+=Call+)?;
	public CallExprElements getCallExprAccess() {
		return pCallExpr;
	}
	
	public ParserRule getCallExprRule() {
		return getCallExprAccess().getRule();
	}
	
	//SubCall:
	//	{SubCall}
	//	'(' name=CallExpr ')';
	public SubCallElements getSubCallAccess() {
		return pSubCall;
	}
	
	public ParserRule getSubCallRule() {
		return getSubCallAccess().getRule();
	}
	
	//Call:
	//	Locale | Access | SubCall;
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//Access:
	//	{Access} name=[Variable] ('.' members+=[Member])* (':' role=[Role])?;
	public AccessElements getAccessAccess() {
		return pAccess;
	}
	
	public ParserRule getAccessRule() {
		return getAccessAccess().getRule();
	}
	
	/// * 
	//
	//Destruct: {Destruct}
	//	name='dispose' '{' linesContent+=(Line)* '}' ; 
	//
	//Build: {Build}
	//	name='new' '{' linesContent+=(Line)* '}' ;
	//
	//
	// * / QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ENDLINE:
	//	'\r'? '\n';
	public TerminalRule getENDLINERule() {
		return tENDLINE;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
