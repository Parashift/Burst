/*
 * generated by Xtext 2.9.0
 */
package org.xtext.burst.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BurstGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cConcernsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cConcernsConcernParserRuleCall_1_0_0 = (RuleCall)cConcernsAssignment_1_0.eContents().get(0);
		private final Assignment cExternIntersectionsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cExternIntersectionsIntersectionParserRuleCall_1_1_0 = (RuleCall)cExternIntersectionsAssignment_1_1.eContents().get(0);
		
		//File:
		//	imports+=Import* (concerns+=Concern | externIntersections+=Intersection)*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import* (concerns+=Concern | externIntersections+=Intersection)*
		public Group getGroup() { return cGroup; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//(concerns+=Concern | externIntersections+=Intersection)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//concerns+=Concern
		public Assignment getConcernsAssignment_1_0() { return cConcernsAssignment_1_0; }
		
		//Concern
		public RuleCall getConcernsConcernParserRuleCall_1_0_0() { return cConcernsConcernParserRuleCall_1_0_0; }
		
		//externIntersections+=Intersection
		public Assignment getExternIntersectionsAssignment_1_1() { return cExternIntersectionsAssignment_1_1; }
		
		//Intersection
		public RuleCall getExternIntersectionsIntersectionParserRuleCall_1_1_0() { return cExternIntersectionsIntersectionParserRuleCall_1_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Import:
		//	{Import}
		//	'import' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Import} 'import' name=ID
		public Group getGroup() { return cGroup; }
		
		//{Import}
		public Action getImportAction_0() { return cImportAction_0; }
		
		//'import'
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class ConcernElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Concern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConcernAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConcernKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSupertypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSupertypeConcernCrossReference_3_1_0 = (CrossReference)cSupertypeAssignment_3_1.eContents().get(0);
		private final RuleCall cSupertypeConcernIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSupertypeConcernCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cMembersMemberParserRuleCall_5_0_0 = (RuleCall)cMembersAssignment_5_0.eContents().get(0);
		private final Assignment cIntersectionsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cIntersectionsIntersectionParserRuleCall_5_1_0 = (RuleCall)cIntersectionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Concern:
		//	{Concern}
		//	'concern' name=ID ('extends' supertype=[Concern])? '{' (members+=Member | intersections+=Intersection)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Concern} 'concern' name=ID ('extends' supertype=[Concern])? '{' (members+=Member | intersections+=Intersection)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Concern}
		public Action getConcernAction_0() { return cConcernAction_0; }
		
		//'concern'
		public Keyword getConcernKeyword_1() { return cConcernKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' supertype=[Concern])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//supertype=[Concern]
		public Assignment getSupertypeAssignment_3_1() { return cSupertypeAssignment_3_1; }
		
		//[Concern]
		public CrossReference getSupertypeConcernCrossReference_3_1_0() { return cSupertypeConcernCrossReference_3_1_0; }
		
		//ID
		public RuleCall getSupertypeConcernIDTerminalRuleCall_3_1_0_1() { return cSupertypeConcernIDTerminalRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(members+=Member | intersections+=Intersection)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//members+=Member
		public Assignment getMembersAssignment_5_0() { return cMembersAssignment_5_0; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_5_0_0() { return cMembersMemberParserRuleCall_5_0_0; }
		
		//intersections+=Intersection
		public Assignment getIntersectionsAssignment_5_1() { return cIntersectionsAssignment_5_1; }
		
		//Intersection
		public RuleCall getIntersectionsIntersectionParserRuleCall_5_1_0() { return cIntersectionsIntersectionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Member:
		//	{Member}
		//	'int' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Member} 'int' name=ID
		public Group getGroup() { return cGroup; }
		
		//{Member}
		public Action getMemberAction_0() { return cMemberAction_0; }
		
		//'int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class IntersectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Intersection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntersectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQualifiersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cQualifiersConcernCrossReference_2_0 = (CrossReference)cQualifiersAssignment_2.eContents().get(0);
		private final RuleCall cQualifiersConcernIDTerminalRuleCall_2_0_1 = (RuleCall)cQualifiersConcernCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLinesContentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLinesContentLineParserRuleCall_4_0 = (RuleCall)cLinesContentAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Intersection:
		//	{Intersection}
		//	'when' qualifiers+=[Concern]* '{' linesContent+=Line* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Intersection} 'when' qualifiers+=[Concern]* '{' linesContent+=Line* '}'
		public Group getGroup() { return cGroup; }
		
		//{Intersection}
		public Action getIntersectionAction_0() { return cIntersectionAction_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//qualifiers+=[Concern]*
		public Assignment getQualifiersAssignment_2() { return cQualifiersAssignment_2; }
		
		//[Concern]
		public CrossReference getQualifiersConcernCrossReference_2_0() { return cQualifiersConcernCrossReference_2_0; }
		
		//ID
		public RuleCall getQualifiersConcernIDTerminalRuleCall_2_0_1() { return cQualifiersConcernIDTerminalRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//linesContent+=Line*
		public Assignment getLinesContentAssignment_4() { return cLinesContentAssignment_4; }
		
		//Line
		public RuleCall getLinesContentLineParserRuleCall_4_0() { return cLinesContentLineParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCalledAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCalledQualifierParserRuleCall_2_0 = (RuleCall)cCalledAssignment_2.eContents().get(0);
		
		//Line:
		//	{Line}
		//	'call' called+=Qualifier*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Line} 'call' called+=Qualifier*
		public Group getGroup() { return cGroup; }
		
		//{Line}
		public Action getLineAction_0() { return cLineAction_0; }
		
		//'call'
		public Keyword getCallKeyword_1() { return cCallKeyword_1; }
		
		//called+=Qualifier*
		public Assignment getCalledAssignment_2() { return cCalledAssignment_2; }
		
		//Qualifier
		public RuleCall getCalledQualifierParserRuleCall_2_0() { return cCalledQualifierParserRuleCall_2_0; }
	}
	public class QualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Qualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cQualifierAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cNoneKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Qualifier:
		//	{Qualifier} name=ID | 'none';
		@Override public ParserRule getRule() { return rule; }
		
		//{Qualifier} name=ID | 'none'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Qualifier} name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//{Qualifier}
		public Action getQualifierAction_0_0() { return cQualifierAction_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'none'
		public Keyword getNoneKeyword_1() { return cNoneKeyword_1; }
	}
	
	
	private final FileElements pFile;
	private final ImportElements pImport;
	private final ConcernElements pConcern;
	private final MemberElements pMember;
	private final IntersectionElements pIntersection;
	private final LineElements pLine;
	private final QualifierElements pQualifier;
	private final TerminalRule tLINE_END;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BurstGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFile = new FileElements();
		this.pImport = new ImportElements();
		this.pConcern = new ConcernElements();
		this.pMember = new MemberElements();
		this.pIntersection = new IntersectionElements();
		this.pLine = new LineElements();
		this.pQualifier = new QualifierElements();
		this.tLINE_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.LINE_END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.burst.Burst".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//File:
	//	imports+=Import* (concerns+=Concern | externIntersections+=Intersection)*;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//Import:
	//	{Import}
	//	'import' name=ID;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Concern:
	//	{Concern}
	//	'concern' name=ID ('extends' supertype=[Concern])? '{' (members+=Member | intersections+=Intersection)* '}';
	public ConcernElements getConcernAccess() {
		return pConcern;
	}
	
	public ParserRule getConcernRule() {
		return getConcernAccess().getRule();
	}
	
	//Member:
	//	{Member}
	//	'int' name=ID;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//Intersection:
	//	{Intersection}
	//	'when' qualifiers+=[Concern]* '{' linesContent+=Line* '}';
	public IntersectionElements getIntersectionAccess() {
		return pIntersection;
	}
	
	public ParserRule getIntersectionRule() {
		return getIntersectionAccess().getRule();
	}
	
	//Line:
	//	{Line}
	//	'call' called+=Qualifier*;
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//Qualifier:
	//	{Qualifier} name=ID | 'none';
	public QualifierElements getQualifierAccess() {
		return pQualifier;
	}
	
	public ParserRule getQualifierRule() {
		return getQualifierAccess().getRule();
	}
	
	//terminal LINE_END:
	//	'\n';
	public TerminalRule getLINE_ENDRule() {
		return tLINE_END;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
