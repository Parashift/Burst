/*
 * generated by Xtext 2.9.0
 */
package org.xtext.burst.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BurstGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.File");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsRuleFileElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//File:
		//	elements+=RuleFileElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=RuleFileElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//RuleFileElement
		public RuleCall getElementsRuleFileElementParserRuleCall_0() { return cElementsRuleFileElementParserRuleCall_0; }
	}
	public class RuleFileElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.RuleFileElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRulePackageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cENDLINETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RuleFileElement:
		//	RuleImport | RulePackage | ENDLINE;
		@Override public ParserRule getRule() { return rule; }
		
		//RuleImport | RulePackage | ENDLINE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RuleImport
		public RuleCall getRuleImportParserRuleCall_0() { return cRuleImportParserRuleCall_0; }
		
		//RulePackage
		public RuleCall getRulePackageParserRuleCall_1() { return cRulePackageParserRuleCall_1; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_2() { return cENDLINETerminalRuleCall_2; }
	}
	public class RuleImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.RuleImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		
		//RuleImport:
		//	{Import}
		//	'import' importedNamespace=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//{Import} 'import' importedNamespace=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//{Import}
		public Action getImportAction_0() { return cImportAction_0; }
		
		//'import'
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }
		
		//importedNamespace=QualifiedName
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }
		
		//QualifiedName
		public RuleCall getImportedNamespaceQualifiedNameParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameParserRuleCall_2_0; }
	}
	public class RulePackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.RulePackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cENDLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cElementsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cElementsPackageElementParserRuleCall_6_0_0 = (RuleCall)cElementsAssignment_6_0.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RulePackage:
		//	{Package} 'package' name=QualifiedName ENDLINE* '{' ENDLINE* (elements+=PackageElement ENDLINE*)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Package} 'package' name=QualifiedName ENDLINE* '{' ENDLINE* (elements+=PackageElement ENDLINE*)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Package}
		public Action getPackageAction_0() { return cPackageAction_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_3() { return cENDLINETerminalRuleCall_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_5() { return cENDLINETerminalRuleCall_5; }
		
		//(elements+=PackageElement ENDLINE*)*
		public Group getGroup_6() { return cGroup_6; }
		
		//elements+=PackageElement
		public Assignment getElementsAssignment_6_0() { return cElementsAssignment_6_0; }
		
		//PackageElement
		public RuleCall getElementsPackageElementParserRuleCall_6_0_0() { return cElementsPackageElementParserRuleCall_6_0_0; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_6_1() { return cENDLINETerminalRuleCall_6_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class PackageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.PackageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleConcernParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleIntersectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PackageElement:
		//	RuleConcern | RuleIntersect;
		@Override public ParserRule getRule() { return rule; }
		
		//RuleConcern | RuleIntersect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RuleConcern
		public RuleCall getRuleConcernParserRuleCall_0() { return cRuleConcernParserRuleCall_0; }
		
		//RuleIntersect
		public RuleCall getRuleIntersectParserRuleCall_1() { return cRuleIntersectParserRuleCall_1; }
	}
	public class RuleConcernElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.RuleConcern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConcernAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConcernKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cENDLINETerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cExtendsKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cENDLINETerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Assignment cSupertypeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final CrossReference cSupertypeConcernCrossReference_3_3_0 = (CrossReference)cSupertypeAssignment_3_3.eContents().get(0);
		private final RuleCall cSupertypeConcernQualifiedNameParserRuleCall_3_3_0_1 = (RuleCall)cSupertypeConcernCrossReference_3_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cElementsAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cElementsConcernElementParserRuleCall_4_2_0_0 = (RuleCall)cElementsAssignment_4_2_0.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_4_2_1 = (RuleCall)cGroup_4_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//RuleConcern:
		//	{Concern}
		//	'concern' name=ID (ENDLINE* 'extends' ENDLINE* supertype=[Concern|QualifiedName])? ('{' ENDLINE*
		//	(elements+=ConcernElement ENDLINE+)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Concern} 'concern' name=ID (ENDLINE* 'extends' ENDLINE* supertype=[Concern|QualifiedName])? ('{' ENDLINE*
		//(elements+=ConcernElement ENDLINE+)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{Concern}
		public Action getConcernAction_0() { return cConcernAction_0; }
		
		//'concern'
		public Keyword getConcernKeyword_1() { return cConcernKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(ENDLINE* 'extends' ENDLINE* supertype=[Concern|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_3_0() { return cENDLINETerminalRuleCall_3_0; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_1() { return cExtendsKeyword_3_1; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_3_2() { return cENDLINETerminalRuleCall_3_2; }
		
		//supertype=[Concern|QualifiedName]
		public Assignment getSupertypeAssignment_3_3() { return cSupertypeAssignment_3_3; }
		
		//[Concern|QualifiedName]
		public CrossReference getSupertypeConcernCrossReference_3_3_0() { return cSupertypeConcernCrossReference_3_3_0; }
		
		//QualifiedName
		public RuleCall getSupertypeConcernQualifiedNameParserRuleCall_3_3_0_1() { return cSupertypeConcernQualifiedNameParserRuleCall_3_3_0_1; }
		
		//('{' ENDLINE* (elements+=ConcernElement ENDLINE+)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_4_1() { return cENDLINETerminalRuleCall_4_1; }
		
		//(elements+=ConcernElement ENDLINE+)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//elements+=ConcernElement
		public Assignment getElementsAssignment_4_2_0() { return cElementsAssignment_4_2_0; }
		
		//ConcernElement
		public RuleCall getElementsConcernElementParserRuleCall_4_2_0_0() { return cElementsConcernElementParserRuleCall_4_2_0_0; }
		
		//ENDLINE+
		public RuleCall getENDLINETerminalRuleCall_4_2_1() { return cENDLINETerminalRuleCall_4_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}
	public class ConcernElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ConcernElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleIntersectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConcernElement:
		//	Member | RuleIntersect;
		@Override public ParserRule getRule() { return rule; }
		
		//Member | RuleIntersect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Member
		public RuleCall getMemberParserRuleCall_0() { return cMemberParserRuleCall_0; }
		
		//RuleIntersect
		public RuleCall getRuleIntersectParserRuleCall_1() { return cRuleIntersectParserRuleCall_1; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cConcernAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cConcernConcernCrossReference_1_0 = (CrossReference)cConcernAssignment_1.eContents().get(0);
		private final RuleCall cConcernConcernQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cConcernConcernCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Member:
		//	{Member} concern=[Concern|QualifiedName] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Member} concern=[Concern|QualifiedName] name=ID
		public Group getGroup() { return cGroup; }
		
		//{Member}
		public Action getMemberAction_0() { return cMemberAction_0; }
		
		//concern=[Concern|QualifiedName]
		public Assignment getConcernAssignment_1() { return cConcernAssignment_1; }
		
		//[Concern|QualifiedName]
		public CrossReference getConcernConcernCrossReference_1_0() { return cConcernConcernCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getConcernConcernQualifiedNameParserRuleCall_1_0_1() { return cConcernConcernQualifiedNameParserRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class RuleIntersectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.RuleIntersect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntersectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameWhenKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParameterParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cENDLINETerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cAlternatives_4_1.eContents().get(0);
		private final Keyword cAndKeyword_4_1_1 = (Keyword)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cENDLINETerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Assignment cParametersAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cParametersParameterParserRuleCall_4_3_0 = (RuleCall)cParametersAssignment_4_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cENDLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cLinesAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cLinesLineParserRuleCall_7_0_0 = (RuleCall)cLinesAssignment_7_0.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//RuleIntersect:
		//	{Intersection} name='when' ENDLINE* parameters+=Parameter (ENDLINE* (',' | 'and') ENDLINE* parameters+=Parameter)*
		//	'{' ENDLINE* (lines+=Line ENDLINE+)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Intersection} name='when' ENDLINE* parameters+=Parameter (ENDLINE* (',' | 'and') ENDLINE* parameters+=Parameter)* '{'
		//ENDLINE* (lines+=Line ENDLINE+)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Intersection}
		public Action getIntersectionAction_0() { return cIntersectionAction_0; }
		
		//name='when'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'when'
		public Keyword getNameWhenKeyword_1_0() { return cNameWhenKeyword_1_0; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_2() { return cENDLINETerminalRuleCall_2; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0() { return cParametersParameterParserRuleCall_3_0; }
		
		//(ENDLINE* (',' | 'and') ENDLINE* parameters+=Parameter)*
		public Group getGroup_4() { return cGroup_4; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_4_0() { return cENDLINETerminalRuleCall_4_0; }
		
		//(',' | 'and')
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//'and'
		public Keyword getAndKeyword_4_1_1() { return cAndKeyword_4_1_1; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_4_2() { return cENDLINETerminalRuleCall_4_2; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_3() { return cParametersAssignment_4_3; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_3_0() { return cParametersParameterParserRuleCall_4_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//ENDLINE*
		public RuleCall getENDLINETerminalRuleCall_6() { return cENDLINETerminalRuleCall_6; }
		
		//(lines+=Line ENDLINE+)*
		public Group getGroup_7() { return cGroup_7; }
		
		//lines+=Line
		public Assignment getLinesAssignment_7_0() { return cLinesAssignment_7_0; }
		
		//Line
		public RuleCall getLinesLineParserRuleCall_7_0_0() { return cLinesLineParserRuleCall_7_0_0; }
		
		//ENDLINE+
		public RuleCall getENDLINETerminalRuleCall_7_1() { return cENDLINETerminalRuleCall_7_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//	Member | Parameter;
		@Override public ParserRule getRule() { return rule; }
		
		//Member | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Member
		public RuleCall getMemberParserRuleCall_0() { return cMemberParserRuleCall_0; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamedParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStaticParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUsageParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Parameter:
		//	NamedParameter | StaticParameter | UsageParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//NamedParameter | StaticParameter | UsageParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NamedParameter
		public RuleCall getNamedParameterParserRuleCall_0() { return cNamedParameterParserRuleCall_0; }
		
		//StaticParameter
		public RuleCall getStaticParameterParserRuleCall_1() { return cStaticParameterParserRuleCall_1; }
		
		//UsageParameter
		public RuleCall getUsageParameterParserRuleCall_2() { return cUsageParameterParserRuleCall_2; }
	}
	public class NamedParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.NamedParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNamedParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeConcernCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeConcernIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeConcernCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//NamedParameter:
		//	{NamedParameter} type=[Concern] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{NamedParameter} type=[Concern] name=ID
		public Group getGroup() { return cGroup; }
		
		//{NamedParameter}
		public Action getNamedParameterAction_0() { return cNamedParameterAction_0; }
		
		//type=[Concern]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Concern]
		public CrossReference getTypeConcernCrossReference_1_0() { return cTypeConcernCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeConcernIDTerminalRuleCall_1_0_1() { return cTypeConcernIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class StaticParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.StaticParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStaticParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameConcernCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameConcernIDTerminalRuleCall_2_0_1 = (RuleCall)cNameConcernCrossReference_2_0.eContents().get(1);
		
		//StaticParameter:
		//	{StaticParameter} 'with' name=[Concern];
		@Override public ParserRule getRule() { return rule; }
		
		//{StaticParameter} 'with' name=[Concern]
		public Group getGroup() { return cGroup; }
		
		//{StaticParameter}
		public Action getStaticParameterAction_0() { return cStaticParameterAction_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//name=[Concern]
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//[Concern]
		public CrossReference getNameConcernCrossReference_2_0() { return cNameConcernCrossReference_2_0; }
		
		//ID
		public RuleCall getNameConcernIDTerminalRuleCall_2_0_1() { return cNameConcernIDTerminalRuleCall_2_0_1; }
	}
	public class UsageParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.UsageParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUsageParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeConcernCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeConcernIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeConcernCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cUsageParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//UsageParameter:
		//	{UsageParameter} type=[Concern] '.' usage name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{UsageParameter} type=[Concern] '.' usage name=ID
		public Group getGroup() { return cGroup; }
		
		//{UsageParameter}
		public Action getUsageParameterAction_0() { return cUsageParameterAction_0; }
		
		//type=[Concern]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Concern]
		public CrossReference getTypeConcernCrossReference_1_0() { return cTypeConcernCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeConcernIDTerminalRuleCall_1_0_1() { return cTypeConcernIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//usage
		public RuleCall getUsageParserRuleCall_3() { return cUsageParserRuleCall_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
	}
	public class UsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.usage");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//usage:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLineAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCallsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallsCallParserRuleCall_1_0 = (RuleCall)cCallsAssignment_1.eContents().get(0);
		private final Assignment cCallsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCallsCallParserRuleCall_2_0 = (RuleCall)cCallsAssignment_2.eContents().get(0);
		
		//Line:
		//	{Line} calls+=Call calls+=Call*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Line} calls+=Call calls+=Call*
		public Group getGroup() { return cGroup; }
		
		//{Line}
		public Action getLineAction_0() { return cLineAction_0; }
		
		//calls+=Call
		public Assignment getCallsAssignment_1() { return cCallsAssignment_1; }
		
		//Call
		public RuleCall getCallsCallParserRuleCall_1_0() { return cCallsCallParserRuleCall_1_0; }
		
		//calls+=Call*
		public Assignment getCallsAssignment_2() { return cCallsAssignment_2; }
		
		//Call
		public RuleCall getCallsCallParserRuleCall_2_0() { return cCallsCallParserRuleCall_2_0; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.Call");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMemberCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Call:
		//	VariableCall | MemberCall;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableCall | MemberCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableCall
		public RuleCall getVariableCallParserRuleCall_0() { return cVariableCallParserRuleCall_0; }
		
		//MemberCall
		public RuleCall getMemberCallParserRuleCall_1() { return cMemberCallParserRuleCall_1; }
	}
	public class MemberCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.MemberCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemberCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableVariableCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNameMemberCrossReference_3_0 = (CrossReference)cNameAssignment_3.eContents().get(0);
		private final RuleCall cNameMemberIDTerminalRuleCall_3_0_1 = (RuleCall)cNameMemberCrossReference_3_0.eContents().get(1);
		
		//MemberCall:
		//	{MemberCall} variable=[Variable] '.' name=[Member];
		@Override public ParserRule getRule() { return rule; }
		
		//{MemberCall} variable=[Variable] '.' name=[Member]
		public Group getGroup() { return cGroup; }
		
		//{MemberCall}
		public Action getMemberCallAction_0() { return cMemberCallAction_0; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_1_0() { return cVariableVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_1_0_1() { return cVariableVariableIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//name=[Member]
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//[Member]
		public CrossReference getNameMemberCrossReference_3_0() { return cNameMemberCrossReference_3_0; }
		
		//ID
		public RuleCall getNameMemberIDTerminalRuleCall_3_0_1() { return cNameMemberIDTerminalRuleCall_3_0_1; }
	}
	public class VariableCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.VariableCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameVariableCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cNameVariableCrossReference_1_0.eContents().get(1);
		
		//VariableCall:
		//	{VariableCall} name=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableCall} name=[Variable]
		public Group getGroup() { return cGroup; }
		
		//{VariableCall}
		public Action getVariableCallAction_0() { return cVariableCallAction_0; }
		
		//name=[Variable]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Variable]
		public CrossReference getNameVariableCrossReference_1_0() { return cNameVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getNameVariableIDTerminalRuleCall_1_0_1() { return cNameVariableIDTerminalRuleCall_1_0_1; }
	}
	public class ParameterCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ParameterCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameParameterCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameParameterIDTerminalRuleCall_1_0_1 = (RuleCall)cNameParameterCrossReference_1_0.eContents().get(1);
		
		//ParameterCall:
		//	{ParameterCall} name=[Parameter];
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterCall} name=[Parameter]
		public Group getGroup() { return cGroup; }
		
		//{ParameterCall}
		public Action getParameterCallAction_0() { return cParameterCallAction_0; }
		
		//name=[Parameter]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Parameter]
		public CrossReference getNameParameterCrossReference_1_0() { return cNameParameterCrossReference_1_0; }
		
		//ID
		public RuleCall getNameParameterIDTerminalRuleCall_1_0_1() { return cNameParameterIDTerminalRuleCall_1_0_1; }
	}
	public class CallMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.CallMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCallMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameMemberCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameMemberIDTerminalRuleCall_1_0_1 = (RuleCall)cNameMemberCrossReference_1_0.eContents().get(1);
		
		//CallMember:
		//	{CallMember} name=[Member];
		@Override public ParserRule getRule() { return rule; }
		
		//{CallMember} name=[Member]
		public Group getGroup() { return cGroup; }
		
		//{CallMember}
		public Action getCallMemberAction_0() { return cCallMemberAction_0; }
		
		//name=[Member]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Member]
		public CrossReference getNameMemberCrossReference_1_0() { return cNameMemberCrossReference_1_0; }
		
		//ID
		public RuleCall getNameMemberIDTerminalRuleCall_1_0_1() { return cNameMemberIDTerminalRuleCall_1_0_1; }
	}
	public class CallParameterInConcernElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.CallParameterInConcern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemberInConcernAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetParameterCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetParameterIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetParameterCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNameMemberCrossReference_3_0 = (CrossReference)cNameAssignment_3.eContents().get(0);
		private final RuleCall cNameMemberIDTerminalRuleCall_3_0_1 = (RuleCall)cNameMemberCrossReference_3_0.eContents().get(1);
		
		//CallParameterInConcern:
		//	{MemberInConcern} target=[Parameter] '.' name=[Member];
		@Override public ParserRule getRule() { return rule; }
		
		//{MemberInConcern} target=[Parameter] '.' name=[Member]
		public Group getGroup() { return cGroup; }
		
		//{MemberInConcern}
		public Action getMemberInConcernAction_0() { return cMemberInConcernAction_0; }
		
		//target=[Parameter]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[Parameter]
		public CrossReference getTargetParameterCrossReference_1_0() { return cTargetParameterCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetParameterIDTerminalRuleCall_1_0_1() { return cTargetParameterIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//name=[Member]
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//[Member]
		public CrossReference getNameMemberCrossReference_3_0() { return cNameMemberCrossReference_3_0; }
		
		//ID
		public RuleCall getNameMemberIDTerminalRuleCall_3_0_1() { return cNameMemberIDTerminalRuleCall_3_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// * 
		//
		//Destruct: {Destruct}
		//	name='dispose' '{' linesContent+=(Line)* '}' ; 
		//
		//Build: {Build}
		//	name='new' '{' linesContent+=(Line)* '}' ;
		//
		//
		//	
		//PotentialLine: 
		//	Line|ENDLINE;
		//	
		// * / QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final FileElements pFile;
	private final RuleFileElementElements pRuleFileElement;
	private final RuleImportElements pRuleImport;
	private final RulePackageElements pRulePackage;
	private final PackageElementElements pPackageElement;
	private final RuleConcernElements pRuleConcern;
	private final ConcernElementElements pConcernElement;
	private final MemberElements pMember;
	private final RuleIntersectElements pRuleIntersect;
	private final VariableElements pVariable;
	private final ParameterElements pParameter;
	private final NamedParameterElements pNamedParameter;
	private final StaticParameterElements pStaticParameter;
	private final UsageParameterElements pUsageParameter;
	private final UsageElements pUsage;
	private final LineElements pLine;
	private final CallElements pCall;
	private final MemberCallElements pMemberCall;
	private final VariableCallElements pVariableCall;
	private final ParameterCallElements pParameterCall;
	private final CallMemberElements pCallMember;
	private final CallParameterInConcernElements pCallParameterInConcern;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tENDLINE;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public BurstGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pFile = new FileElements();
		this.pRuleFileElement = new RuleFileElementElements();
		this.pRuleImport = new RuleImportElements();
		this.pRulePackage = new RulePackageElements();
		this.pPackageElement = new PackageElementElements();
		this.pRuleConcern = new RuleConcernElements();
		this.pConcernElement = new ConcernElementElements();
		this.pMember = new MemberElements();
		this.pRuleIntersect = new RuleIntersectElements();
		this.pVariable = new VariableElements();
		this.pParameter = new ParameterElements();
		this.pNamedParameter = new NamedParameterElements();
		this.pStaticParameter = new StaticParameterElements();
		this.pUsageParameter = new UsageParameterElements();
		this.pUsage = new UsageElements();
		this.pLine = new LineElements();
		this.pCall = new CallElements();
		this.pMemberCall = new MemberCallElements();
		this.pVariableCall = new VariableCallElements();
		this.pParameterCall = new ParameterCallElements();
		this.pCallMember = new CallMemberElements();
		this.pCallParameterInConcern = new CallParameterInConcernElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.WS");
		this.tENDLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ENDLINE");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.burst.Burst.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.burst.Burst".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//File:
	//	elements+=RuleFileElement*;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//RuleFileElement:
	//	RuleImport | RulePackage | ENDLINE;
	public RuleFileElementElements getRuleFileElementAccess() {
		return pRuleFileElement;
	}
	
	public ParserRule getRuleFileElementRule() {
		return getRuleFileElementAccess().getRule();
	}
	
	//RuleImport:
	//	{Import}
	//	'import' importedNamespace=QualifiedName;
	public RuleImportElements getRuleImportAccess() {
		return pRuleImport;
	}
	
	public ParserRule getRuleImportRule() {
		return getRuleImportAccess().getRule();
	}
	
	//RulePackage:
	//	{Package} 'package' name=QualifiedName ENDLINE* '{' ENDLINE* (elements+=PackageElement ENDLINE*)* '}';
	public RulePackageElements getRulePackageAccess() {
		return pRulePackage;
	}
	
	public ParserRule getRulePackageRule() {
		return getRulePackageAccess().getRule();
	}
	
	//PackageElement:
	//	RuleConcern | RuleIntersect;
	public PackageElementElements getPackageElementAccess() {
		return pPackageElement;
	}
	
	public ParserRule getPackageElementRule() {
		return getPackageElementAccess().getRule();
	}
	
	//RuleConcern:
	//	{Concern}
	//	'concern' name=ID (ENDLINE* 'extends' ENDLINE* supertype=[Concern|QualifiedName])? ('{' ENDLINE*
	//	(elements+=ConcernElement ENDLINE+)* '}')?;
	public RuleConcernElements getRuleConcernAccess() {
		return pRuleConcern;
	}
	
	public ParserRule getRuleConcernRule() {
		return getRuleConcernAccess().getRule();
	}
	
	//ConcernElement:
	//	Member | RuleIntersect;
	public ConcernElementElements getConcernElementAccess() {
		return pConcernElement;
	}
	
	public ParserRule getConcernElementRule() {
		return getConcernElementAccess().getRule();
	}
	
	//Member:
	//	{Member} concern=[Concern|QualifiedName] name=ID;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//RuleIntersect:
	//	{Intersection} name='when' ENDLINE* parameters+=Parameter (ENDLINE* (',' | 'and') ENDLINE* parameters+=Parameter)*
	//	'{' ENDLINE* (lines+=Line ENDLINE+)* '}';
	public RuleIntersectElements getRuleIntersectAccess() {
		return pRuleIntersect;
	}
	
	public ParserRule getRuleIntersectRule() {
		return getRuleIntersectAccess().getRule();
	}
	
	//Variable:
	//	Member | Parameter;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Parameter:
	//	NamedParameter | StaticParameter | UsageParameter;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//NamedParameter:
	//	{NamedParameter} type=[Concern] name=ID;
	public NamedParameterElements getNamedParameterAccess() {
		return pNamedParameter;
	}
	
	public ParserRule getNamedParameterRule() {
		return getNamedParameterAccess().getRule();
	}
	
	//StaticParameter:
	//	{StaticParameter} 'with' name=[Concern];
	public StaticParameterElements getStaticParameterAccess() {
		return pStaticParameter;
	}
	
	public ParserRule getStaticParameterRule() {
		return getStaticParameterAccess().getRule();
	}
	
	//UsageParameter:
	//	{UsageParameter} type=[Concern] '.' usage name=ID;
	public UsageParameterElements getUsageParameterAccess() {
		return pUsageParameter;
	}
	
	public ParserRule getUsageParameterRule() {
		return getUsageParameterAccess().getRule();
	}
	
	//usage:
	//	ID;
	public UsageElements getUsageAccess() {
		return pUsage;
	}
	
	public ParserRule getUsageRule() {
		return getUsageAccess().getRule();
	}
	
	//Line:
	//	{Line} calls+=Call calls+=Call*;
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//Call:
	//	VariableCall | MemberCall;
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//MemberCall:
	//	{MemberCall} variable=[Variable] '.' name=[Member];
	public MemberCallElements getMemberCallAccess() {
		return pMemberCall;
	}
	
	public ParserRule getMemberCallRule() {
		return getMemberCallAccess().getRule();
	}
	
	//VariableCall:
	//	{VariableCall} name=[Variable];
	public VariableCallElements getVariableCallAccess() {
		return pVariableCall;
	}
	
	public ParserRule getVariableCallRule() {
		return getVariableCallAccess().getRule();
	}
	
	//ParameterCall:
	//	{ParameterCall} name=[Parameter];
	public ParameterCallElements getParameterCallAccess() {
		return pParameterCall;
	}
	
	public ParserRule getParameterCallRule() {
		return getParameterCallAccess().getRule();
	}
	
	//CallMember:
	//	{CallMember} name=[Member];
	public CallMemberElements getCallMemberAccess() {
		return pCallMember;
	}
	
	public ParserRule getCallMemberRule() {
		return getCallMemberAccess().getRule();
	}
	
	//CallParameterInConcern:
	//	{MemberInConcern} target=[Parameter] '.' name=[Member];
	public CallParameterInConcernElements getCallParameterInConcernAccess() {
		return pCallParameterInConcern;
	}
	
	public ParserRule getCallParameterInConcernRule() {
		return getCallParameterInConcernAccess().getRule();
	}
	
	/// * 
	//
	//Destruct: {Destruct}
	//	name='dispose' '{' linesContent+=(Line)* '}' ; 
	//
	//Build: {Build}
	//	name='new' '{' linesContent+=(Line)* '}' ;
	//
	//
	//	
	//PotentialLine: 
	//	Line|ENDLINE;
	//	
	// * / QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ENDLINE:
	//	'\r'? '\n';
	public TerminalRule getENDLINERule() {
		return tENDLINE;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
