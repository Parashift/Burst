/**
 * generated by Xtext 2.10.0
 */
package org.xtext.burst.burst.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.burst.burst.BurstPackage;
import org.xtext.burst.burst.Call;
import org.xtext.burst.burst.CallExpr;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Call Expr</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.burst.burst.impl.CallExprImpl#getContent <em>Content</em>}</li>
 *   <li>{@link org.xtext.burst.burst.impl.CallExprImpl#isEquality <em>Equality</em>}</li>
 *   <li>{@link org.xtext.burst.burst.impl.CallExprImpl#getSource <em>Source</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CallExprImpl extends LineImpl implements CallExpr
{
  /**
   * The cached value of the '{@link #getContent() <em>Content</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContent()
   * @generated
   * @ordered
   */
  protected EList<Call> content;

  /**
   * The default value of the '{@link #isEquality() <em>Equality</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEquality()
   * @generated
   * @ordered
   */
  protected static final boolean EQUALITY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEquality() <em>Equality</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEquality()
   * @generated
   * @ordered
   */
  protected boolean equality = EQUALITY_EDEFAULT;

  /**
   * The cached value of the '{@link #getSource() <em>Source</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected EList<Call> source;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CallExprImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BurstPackage.Literals.CALL_EXPR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Call> getContent()
  {
    if (content == null)
    {
      content = new EObjectContainmentEList<Call>(Call.class, this, BurstPackage.CALL_EXPR__CONTENT);
    }
    return content;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isEquality()
  {
    return equality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEquality(boolean newEquality)
  {
    boolean oldEquality = equality;
    equality = newEquality;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BurstPackage.CALL_EXPR__EQUALITY, oldEquality, equality));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Call> getSource()
  {
    if (source == null)
    {
      source = new EObjectContainmentEList<Call>(Call.class, this, BurstPackage.CALL_EXPR__SOURCE);
    }
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BurstPackage.CALL_EXPR__CONTENT:
        return ((InternalEList<?>)getContent()).basicRemove(otherEnd, msgs);
      case BurstPackage.CALL_EXPR__SOURCE:
        return ((InternalEList<?>)getSource()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BurstPackage.CALL_EXPR__CONTENT:
        return getContent();
      case BurstPackage.CALL_EXPR__EQUALITY:
        return isEquality();
      case BurstPackage.CALL_EXPR__SOURCE:
        return getSource();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BurstPackage.CALL_EXPR__CONTENT:
        getContent().clear();
        getContent().addAll((Collection<? extends Call>)newValue);
        return;
      case BurstPackage.CALL_EXPR__EQUALITY:
        setEquality((Boolean)newValue);
        return;
      case BurstPackage.CALL_EXPR__SOURCE:
        getSource().clear();
        getSource().addAll((Collection<? extends Call>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BurstPackage.CALL_EXPR__CONTENT:
        getContent().clear();
        return;
      case BurstPackage.CALL_EXPR__EQUALITY:
        setEquality(EQUALITY_EDEFAULT);
        return;
      case BurstPackage.CALL_EXPR__SOURCE:
        getSource().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BurstPackage.CALL_EXPR__CONTENT:
        return content != null && !content.isEmpty();
      case BurstPackage.CALL_EXPR__EQUALITY:
        return equality != EQUALITY_EDEFAULT;
      case BurstPackage.CALL_EXPR__SOURCE:
        return source != null && !source.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (equality: ");
    result.append(equality);
    result.append(')');
    return result.toString();
  }

} //CallExprImpl
