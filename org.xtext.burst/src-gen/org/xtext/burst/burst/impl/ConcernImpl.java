/**
 * generated by Xtext 2.9.0
 */
package org.xtext.burst.burst.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.burst.burst.Build;
import org.xtext.burst.burst.BurstPackage;
import org.xtext.burst.burst.Concern;
import org.xtext.burst.burst.Destruct;
import org.xtext.burst.burst.Intersection;
import org.xtext.burst.burst.Member;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Concern</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.burst.burst.impl.ConcernImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.burst.burst.impl.ConcernImpl#getSupertype <em>Supertype</em>}</li>
 *   <li>{@link org.xtext.burst.burst.impl.ConcernImpl#getMembers <em>Members</em>}</li>
 *   <li>{@link org.xtext.burst.burst.impl.ConcernImpl#getIntersections <em>Intersections</em>}</li>
 *   <li>{@link org.xtext.burst.burst.impl.ConcernImpl#getBuild <em>Build</em>}</li>
 *   <li>{@link org.xtext.burst.burst.impl.ConcernImpl#getDestruct <em>Destruct</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConcernImpl extends AbstractElementImpl implements Concern
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSupertype() <em>Supertype</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSupertype()
   * @generated
   * @ordered
   */
  protected Concern supertype;

  /**
   * The cached value of the '{@link #getMembers() <em>Members</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMembers()
   * @generated
   * @ordered
   */
  protected EList<Member> members;

  /**
   * The cached value of the '{@link #getIntersections() <em>Intersections</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIntersections()
   * @generated
   * @ordered
   */
  protected EList<Intersection> intersections;

  /**
   * The cached value of the '{@link #getBuild() <em>Build</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBuild()
   * @generated
   * @ordered
   */
  protected Build build;

  /**
   * The cached value of the '{@link #getDestruct() <em>Destruct</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDestruct()
   * @generated
   * @ordered
   */
  protected Destruct destruct;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConcernImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BurstPackage.Literals.CONCERN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BurstPackage.CONCERN__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concern getSupertype()
  {
    if (supertype != null && supertype.eIsProxy())
    {
      InternalEObject oldSupertype = (InternalEObject)supertype;
      supertype = (Concern)eResolveProxy(oldSupertype);
      if (supertype != oldSupertype)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BurstPackage.CONCERN__SUPERTYPE, oldSupertype, supertype));
      }
    }
    return supertype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concern basicGetSupertype()
  {
    return supertype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSupertype(Concern newSupertype)
  {
    Concern oldSupertype = supertype;
    supertype = newSupertype;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BurstPackage.CONCERN__SUPERTYPE, oldSupertype, supertype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Member> getMembers()
  {
    if (members == null)
    {
      members = new EObjectContainmentEList<Member>(Member.class, this, BurstPackage.CONCERN__MEMBERS);
    }
    return members;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Intersection> getIntersections()
  {
    if (intersections == null)
    {
      intersections = new EObjectContainmentEList<Intersection>(Intersection.class, this, BurstPackage.CONCERN__INTERSECTIONS);
    }
    return intersections;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Build getBuild()
  {
    return build;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBuild(Build newBuild, NotificationChain msgs)
  {
    Build oldBuild = build;
    build = newBuild;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BurstPackage.CONCERN__BUILD, oldBuild, newBuild);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBuild(Build newBuild)
  {
    if (newBuild != build)
    {
      NotificationChain msgs = null;
      if (build != null)
        msgs = ((InternalEObject)build).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BurstPackage.CONCERN__BUILD, null, msgs);
      if (newBuild != null)
        msgs = ((InternalEObject)newBuild).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BurstPackage.CONCERN__BUILD, null, msgs);
      msgs = basicSetBuild(newBuild, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BurstPackage.CONCERN__BUILD, newBuild, newBuild));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Destruct getDestruct()
  {
    return destruct;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDestruct(Destruct newDestruct, NotificationChain msgs)
  {
    Destruct oldDestruct = destruct;
    destruct = newDestruct;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BurstPackage.CONCERN__DESTRUCT, oldDestruct, newDestruct);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDestruct(Destruct newDestruct)
  {
    if (newDestruct != destruct)
    {
      NotificationChain msgs = null;
      if (destruct != null)
        msgs = ((InternalEObject)destruct).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BurstPackage.CONCERN__DESTRUCT, null, msgs);
      if (newDestruct != null)
        msgs = ((InternalEObject)newDestruct).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BurstPackage.CONCERN__DESTRUCT, null, msgs);
      msgs = basicSetDestruct(newDestruct, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BurstPackage.CONCERN__DESTRUCT, newDestruct, newDestruct));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BurstPackage.CONCERN__MEMBERS:
        return ((InternalEList<?>)getMembers()).basicRemove(otherEnd, msgs);
      case BurstPackage.CONCERN__INTERSECTIONS:
        return ((InternalEList<?>)getIntersections()).basicRemove(otherEnd, msgs);
      case BurstPackage.CONCERN__BUILD:
        return basicSetBuild(null, msgs);
      case BurstPackage.CONCERN__DESTRUCT:
        return basicSetDestruct(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BurstPackage.CONCERN__NAME:
        return getName();
      case BurstPackage.CONCERN__SUPERTYPE:
        if (resolve) return getSupertype();
        return basicGetSupertype();
      case BurstPackage.CONCERN__MEMBERS:
        return getMembers();
      case BurstPackage.CONCERN__INTERSECTIONS:
        return getIntersections();
      case BurstPackage.CONCERN__BUILD:
        return getBuild();
      case BurstPackage.CONCERN__DESTRUCT:
        return getDestruct();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BurstPackage.CONCERN__NAME:
        setName((String)newValue);
        return;
      case BurstPackage.CONCERN__SUPERTYPE:
        setSupertype((Concern)newValue);
        return;
      case BurstPackage.CONCERN__MEMBERS:
        getMembers().clear();
        getMembers().addAll((Collection<? extends Member>)newValue);
        return;
      case BurstPackage.CONCERN__INTERSECTIONS:
        getIntersections().clear();
        getIntersections().addAll((Collection<? extends Intersection>)newValue);
        return;
      case BurstPackage.CONCERN__BUILD:
        setBuild((Build)newValue);
        return;
      case BurstPackage.CONCERN__DESTRUCT:
        setDestruct((Destruct)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BurstPackage.CONCERN__NAME:
        setName(NAME_EDEFAULT);
        return;
      case BurstPackage.CONCERN__SUPERTYPE:
        setSupertype((Concern)null);
        return;
      case BurstPackage.CONCERN__MEMBERS:
        getMembers().clear();
        return;
      case BurstPackage.CONCERN__INTERSECTIONS:
        getIntersections().clear();
        return;
      case BurstPackage.CONCERN__BUILD:
        setBuild((Build)null);
        return;
      case BurstPackage.CONCERN__DESTRUCT:
        setDestruct((Destruct)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BurstPackage.CONCERN__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case BurstPackage.CONCERN__SUPERTYPE:
        return supertype != null;
      case BurstPackage.CONCERN__MEMBERS:
        return members != null && !members.isEmpty();
      case BurstPackage.CONCERN__INTERSECTIONS:
        return intersections != null && !intersections.isEmpty();
      case BurstPackage.CONCERN__BUILD:
        return build != null;
      case BurstPackage.CONCERN__DESTRUCT:
        return destruct != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ConcernImpl
