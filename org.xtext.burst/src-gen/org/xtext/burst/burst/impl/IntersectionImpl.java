/**
 * generated by Xtext 2.9.0
 */
package org.xtext.burst.burst.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.burst.burst.BurstPackage;
import org.xtext.burst.burst.Concern;
import org.xtext.burst.burst.Intersection;
import org.xtext.burst.burst.Line;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Intersection</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.burst.burst.impl.IntersectionImpl#getQualifiers <em>Qualifiers</em>}</li>
 *   <li>{@link org.xtext.burst.burst.impl.IntersectionImpl#getLinesContent <em>Lines Content</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IntersectionImpl extends MinimalEObjectImpl.Container implements Intersection
{
  /**
   * The cached value of the '{@link #getQualifiers() <em>Qualifiers</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQualifiers()
   * @generated
   * @ordered
   */
  protected EList<Concern> qualifiers;

  /**
   * The cached value of the '{@link #getLinesContent() <em>Lines Content</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLinesContent()
   * @generated
   * @ordered
   */
  protected EList<Line> linesContent;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IntersectionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BurstPackage.Literals.INTERSECTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Concern> getQualifiers()
  {
    if (qualifiers == null)
    {
      qualifiers = new EObjectResolvingEList<Concern>(Concern.class, this, BurstPackage.INTERSECTION__QUALIFIERS);
    }
    return qualifiers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Line> getLinesContent()
  {
    if (linesContent == null)
    {
      linesContent = new EObjectContainmentEList<Line>(Line.class, this, BurstPackage.INTERSECTION__LINES_CONTENT);
    }
    return linesContent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BurstPackage.INTERSECTION__LINES_CONTENT:
        return ((InternalEList<?>)getLinesContent()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BurstPackage.INTERSECTION__QUALIFIERS:
        return getQualifiers();
      case BurstPackage.INTERSECTION__LINES_CONTENT:
        return getLinesContent();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BurstPackage.INTERSECTION__QUALIFIERS:
        getQualifiers().clear();
        getQualifiers().addAll((Collection<? extends Concern>)newValue);
        return;
      case BurstPackage.INTERSECTION__LINES_CONTENT:
        getLinesContent().clear();
        getLinesContent().addAll((Collection<? extends Line>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BurstPackage.INTERSECTION__QUALIFIERS:
        getQualifiers().clear();
        return;
      case BurstPackage.INTERSECTION__LINES_CONTENT:
        getLinesContent().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BurstPackage.INTERSECTION__QUALIFIERS:
        return qualifiers != null && !qualifiers.isEmpty();
      case BurstPackage.INTERSECTION__LINES_CONTENT:
        return linesContent != null && !linesContent.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //IntersectionImpl
