/**
 * generated by Xtext 2.9.0
 */
package org.xtext.burst.burst.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.burst.burst.BurstPackage;
import org.xtext.burst.burst.Concern;
import org.xtext.burst.burst.File;
import org.xtext.burst.burst.Import;
import org.xtext.burst.burst.Intersection;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>File</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.burst.burst.impl.FileImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link org.xtext.burst.burst.impl.FileImpl#getConcerns <em>Concerns</em>}</li>
 *   <li>{@link org.xtext.burst.burst.impl.FileImpl#getExternIntersections <em>Extern Intersections</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FileImpl extends MinimalEObjectImpl.Container implements File
{
  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<Import> imports;

  /**
   * The cached value of the '{@link #getConcerns() <em>Concerns</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcerns()
   * @generated
   * @ordered
   */
  protected EList<Concern> concerns;

  /**
   * The cached value of the '{@link #getExternIntersections() <em>Extern Intersections</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExternIntersections()
   * @generated
   * @ordered
   */
  protected EList<Intersection> externIntersections;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FileImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BurstPackage.Literals.FILE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Import> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<Import>(Import.class, this, BurstPackage.FILE__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Concern> getConcerns()
  {
    if (concerns == null)
    {
      concerns = new EObjectContainmentEList<Concern>(Concern.class, this, BurstPackage.FILE__CONCERNS);
    }
    return concerns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Intersection> getExternIntersections()
  {
    if (externIntersections == null)
    {
      externIntersections = new EObjectContainmentEList<Intersection>(Intersection.class, this, BurstPackage.FILE__EXTERN_INTERSECTIONS);
    }
    return externIntersections;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BurstPackage.FILE__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case BurstPackage.FILE__CONCERNS:
        return ((InternalEList<?>)getConcerns()).basicRemove(otherEnd, msgs);
      case BurstPackage.FILE__EXTERN_INTERSECTIONS:
        return ((InternalEList<?>)getExternIntersections()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BurstPackage.FILE__IMPORTS:
        return getImports();
      case BurstPackage.FILE__CONCERNS:
        return getConcerns();
      case BurstPackage.FILE__EXTERN_INTERSECTIONS:
        return getExternIntersections();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BurstPackage.FILE__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends Import>)newValue);
        return;
      case BurstPackage.FILE__CONCERNS:
        getConcerns().clear();
        getConcerns().addAll((Collection<? extends Concern>)newValue);
        return;
      case BurstPackage.FILE__EXTERN_INTERSECTIONS:
        getExternIntersections().clear();
        getExternIntersections().addAll((Collection<? extends Intersection>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BurstPackage.FILE__IMPORTS:
        getImports().clear();
        return;
      case BurstPackage.FILE__CONCERNS:
        getConcerns().clear();
        return;
      case BurstPackage.FILE__EXTERN_INTERSECTIONS:
        getExternIntersections().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BurstPackage.FILE__IMPORTS:
        return imports != null && !imports.isEmpty();
      case BurstPackage.FILE__CONCERNS:
        return concerns != null && !concerns.isEmpty();
      case BurstPackage.FILE__EXTERN_INTERSECTIONS:
        return externIntersections != null && !externIntersections.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //FileImpl
