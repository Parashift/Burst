/*
 * generated by Xtext 2.9.0
 */
grammar InternalBurst;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.burst.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.burst.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.burst.services.BurstGrammarAccess;

}

@parser::members {

 	private BurstGrammarAccess grammarAccess;

    public InternalBurstParser(TokenStream input, BurstGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "File";
   	}

   	@Override
   	protected BurstGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	iv_ruleFile=ruleFile
	{ $current=$iv_ruleFile.current; }
	EOF;

// Rule File
ruleFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFileAccess().getImportsImportParserRuleCall_0_0());
				}
				lv_imports_0_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileRule());
					}
					add(
						$current,
						"imports",
						lv_imports_0_0,
						"org.xtext.burst.Burst.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFileAccess().getConcernsConcernParserRuleCall_1_0_0());
					}
					lv_concerns_1_0=ruleConcern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFileRule());
						}
						add(
							$current,
							"concerns",
							lv_concerns_1_0,
							"org.xtext.burst.Burst.Concern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFileAccess().getExternIntersectionsIntersectionParserRuleCall_1_1_0());
					}
					lv_externIntersections_2_0=ruleIntersection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFileRule());
						}
						add(
							$current,
							"externIntersections",
							lv_externIntersections_2_0,
							"org.xtext.burst.Burst.Intersection");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getImportAccess().getImportAction_0(),
					$current);
			}
		)
		otherlv_1='import'
		{
			newLeafNode(otherlv_1, grammarAccess.getImportAccess().getImportKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getImportAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleConcern
entryRuleConcern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConcernRule()); }
	iv_ruleConcern=ruleConcern
	{ $current=$iv_ruleConcern.current; }
	EOF;

// Rule Concern
ruleConcern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConcernAccess().getConcernAction_0(),
					$current);
			}
		)
		otherlv_1='concern'
		{
			newLeafNode(otherlv_1, grammarAccess.getConcernAccess().getConcernKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getConcernAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConcernRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='extends'
			{
				newLeafNode(otherlv_3, grammarAccess.getConcernAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConcernRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getConcernAccess().getSupertypeConcernCrossReference_3_1_0());
					}
				)
			)
		)?
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getConcernAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConcernAccess().getMembersMemberParserRuleCall_5_0_0());
					}
					lv_members_6_0=ruleMember
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConcernRule());
						}
						add(
							$current,
							"members",
							lv_members_6_0,
							"org.xtext.burst.Burst.Member");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getConcernAccess().getIntersectionsIntersectionParserRuleCall_5_1_0());
					}
					lv_intersections_7_0=ruleIntersection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConcernRule());
						}
						add(
							$current,
							"intersections",
							lv_intersections_7_0,
							"org.xtext.burst.Burst.Intersection");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getConcernAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	iv_ruleMember=ruleMember
	{ $current=$iv_ruleMember.current; }
	EOF;

// Rule Member
ruleMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMemberAccess().getMemberAction_0(),
					$current);
			}
		)
		otherlv_1='int'
		{
			newLeafNode(otherlv_1, grammarAccess.getMemberAccess().getIntKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getMemberAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMemberRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleIntersection
entryRuleIntersection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntersectionRule()); }
	iv_ruleIntersection=ruleIntersection
	{ $current=$iv_ruleIntersection.current; }
	EOF;

// Rule Intersection
ruleIntersection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntersectionAccess().getIntersectionAction_0(),
					$current);
			}
		)
		otherlv_1='when'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntersectionAccess().getWhenKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntersectionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getIntersectionAccess().getQualifiersConcernCrossReference_2_0());
				}
			)
		)*
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getIntersectionAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntersectionAccess().getLinesContentLineParserRuleCall_4_0());
				}
				lv_linesContent_4_0=ruleLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntersectionRule());
					}
					add(
						$current,
						"linesContent",
						lv_linesContent_4_0,
						"org.xtext.burst.Burst.Line");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getIntersectionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleLine
entryRuleLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLineRule()); }
	iv_ruleLine=ruleLine
	{ $current=$iv_ruleLine.current; }
	EOF;

// Rule Line
ruleLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLineAccess().getLineAction_0(),
					$current);
			}
		)
		otherlv_1='call'
		{
			newLeafNode(otherlv_1, grammarAccess.getLineAccess().getCallKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLineAccess().getCalledQualifierParserRuleCall_2_0());
				}
				lv_called_2_0=ruleQualifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLineRule());
					}
					add(
						$current,
						"called",
						lv_called_2_0,
						"org.xtext.burst.Burst.Qualifier");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleQualifier
entryRuleQualifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQualifierRule()); }
	iv_ruleQualifier=ruleQualifier
	{ $current=$iv_ruleQualifier.current; }
	EOF;

// Rule Qualifier
ruleQualifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getQualifierAccess().getQualifierAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getQualifierAccess().getNameIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQualifierRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		otherlv_2='none'
		{
			newLeafNode(otherlv_2, grammarAccess.getQualifierAccess().getNoneKeyword_1());
		}
	)
;

RULE_LINE_END : '\n';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
