/*
 * generated by Xtext 2.9.0
 */
package org.xtext.burst.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.burst.burst.BurstPackage;
import org.xtext.burst.burst.CallMember;
import org.xtext.burst.burst.Concern;
import org.xtext.burst.burst.File;
import org.xtext.burst.burst.Import;
import org.xtext.burst.burst.Intersection;
import org.xtext.burst.burst.Line;
import org.xtext.burst.burst.Member;
import org.xtext.burst.burst.MemberInConcern;
import org.xtext.burst.burst.ParameterCall;
import org.xtext.burst.burst.Variable;
import org.xtext.burst.burst.toto;
import org.xtext.burst.services.BurstGrammarAccess;

@SuppressWarnings("all")
public class BurstSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BurstGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BurstPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BurstPackage.CALL_MEMBER:
				sequence_CallMember(context, (CallMember) semanticObject); 
				return; 
			case BurstPackage.CONCERN:
				sequence_RuleConcern(context, (Concern) semanticObject); 
				return; 
			case BurstPackage.FILE:
				sequence_File(context, (File) semanticObject); 
				return; 
			case BurstPackage.IMPORT:
				sequence_RuleImport(context, (Import) semanticObject); 
				return; 
			case BurstPackage.INTERSECTION:
				sequence_RuleIntersect(context, (Intersection) semanticObject); 
				return; 
			case BurstPackage.LINE:
				sequence_Line(context, (Line) semanticObject); 
				return; 
			case BurstPackage.MEMBER:
				sequence_Member(context, (Member) semanticObject); 
				return; 
			case BurstPackage.MEMBER_IN_CONCERN:
				sequence_CallMemberInConcern(context, (MemberInConcern) semanticObject); 
				return; 
			case BurstPackage.PACKAGE:
				sequence_RulePackage(context, (org.xtext.burst.burst.Package) semanticObject); 
				return; 
			case BurstPackage.PARAMETER:
				sequence_Parameter(context, (org.xtext.burst.burst.Parameter) semanticObject); 
				return; 
			case BurstPackage.PARAMETER_CALL:
				sequence_ParameterCall(context, (ParameterCall) semanticObject); 
				return; 
			case BurstPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case BurstPackage.TOTO:
				sequence_toto(context, (toto) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Call returns MemberInConcern
	 *     CallMemberInConcern returns MemberInConcern
	 *
	 * Constraint:
	 *     (target=[Concern|ID] name=[Member|ID])
	 */
	protected void sequence_CallMemberInConcern(ISerializationContext context, MemberInConcern semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.MEMBER_IN_CONCERN__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.MEMBER_IN_CONCERN__TARGET));
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.MEMBER_IN_CONCERN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.MEMBER_IN_CONCERN__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCallMemberInConcernAccess().getTargetConcernIDTerminalRuleCall_1_0_1(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getCallMemberInConcernAccess().getNameMemberIDTerminalRuleCall_3_0_1(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Call returns CallMember
	 *     CallMember returns CallMember
	 *
	 * Constraint:
	 *     name=[Member|ID]
	 */
	protected void sequence_CallMember(ISerializationContext context, CallMember semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.CALL_MEMBER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.CALL_MEMBER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCallMemberAccess().getNameMemberIDTerminalRuleCall_1_0_1(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     File returns File
	 *
	 * Constraint:
	 *     elements+=RuleFileElement+
	 */
	protected void sequence_File(ISerializationContext context, File semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IntersectionElement returns Line
	 *     Line returns Line
	 *
	 * Constraint:
	 *     (calls+=Call calls+=Call*)
	 */
	protected void sequence_Line(ISerializationContext context, Line semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcernElement returns Member
	 *     Member returns Member
	 *
	 * Constraint:
	 *     (concern=[Concern|QualifiedName] name=ID)
	 */
	protected void sequence_Member(ISerializationContext context, Member semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.MEMBER__CONCERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.MEMBER__CONCERN));
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.MEMBER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.MEMBER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMemberAccess().getConcernConcernQualifiedNameParserRuleCall_1_0_1(), semanticObject.getConcern());
		feeder.accept(grammarAccess.getMemberAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterCall returns ParameterCall
	 *
	 * Constraint:
	 *     name=[Parameter|ID]
	 */
	protected void sequence_ParameterCall(ISerializationContext context, ParameterCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.PARAMETER_CALL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.PARAMETER_CALL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterCallAccess().getNameParameterIDTerminalRuleCall_1_0_1(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     name=[Concern|QualifiedName]
	 */
	protected void sequence_Parameter(ISerializationContext context, org.xtext.burst.burst.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameConcernQualifiedNameParserRuleCall_1_0_1(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackageElement returns Concern
	 *     RuleConcern returns Concern
	 *
	 * Constraint:
	 *     (name=ID supertype=[Concern|QualifiedName]? elements+=ConcernElement*)
	 */
	protected void sequence_RuleConcern(ISerializationContext context, Concern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RuleFileElement returns Import
	 *     RuleImport returns Import
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedName
	 */
	protected void sequence_RuleImport(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRuleImportAccess().getImportedNamespaceQualifiedNameParserRuleCall_2_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackageElement returns Intersection
	 *     ConcernElement returns Intersection
	 *     RuleIntersect returns Intersection
	 *
	 * Constraint:
	 *     (name='when' parameters+=Parameter* lines+=IntersectionElement*)
	 */
	protected void sequence_RuleIntersect(ISerializationContext context, Intersection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RuleFileElement returns Package
	 *     RulePackage returns Package
	 *
	 * Constraint:
	 *     (name=QualifiedName elements+=PackageElement*)
	 */
	protected void sequence_RulePackage(ISerializationContext context, org.xtext.burst.burst.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=[Concern|QualifiedName]
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameConcernQualifiedNameParserRuleCall_1_0_1(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     toto returns toto
	 *
	 * Constraint:
	 *     name='toto'
	 */
	protected void sequence_toto(ISerializationContext context, toto semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.TOTO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.TOTO__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTotoAccess().getNameTotoKeyword_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
