/*
 * generated by Xtext 2.9.0
 */
package org.xtext.burst.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.burst.burst.BurstPackage;
import org.xtext.burst.burst.Concern;
import org.xtext.burst.burst.File;
import org.xtext.burst.burst.Import;
import org.xtext.burst.burst.Intersection;
import org.xtext.burst.burst.Line;
import org.xtext.burst.burst.Member;
import org.xtext.burst.burst.MemberCall;
import org.xtext.burst.burst.MemberInConcern;
import org.xtext.burst.services.BurstGrammarAccess;

@SuppressWarnings("all")
public class BurstSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BurstGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BurstPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BurstPackage.CONCERN:
				sequence_Concern(context, (Concern) semanticObject); 
				return; 
			case BurstPackage.FILE:
				sequence_File(context, (File) semanticObject); 
				return; 
			case BurstPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case BurstPackage.INTERSECTION:
				sequence_Intersection(context, (Intersection) semanticObject); 
				return; 
			case BurstPackage.LINE:
				sequence_Line(context, (Line) semanticObject); 
				return; 
			case BurstPackage.MEMBER:
				sequence_Member(context, (Member) semanticObject); 
				return; 
			case BurstPackage.MEMBER_CALL:
				sequence_MemberCall(context, (MemberCall) semanticObject); 
				return; 
			case BurstPackage.MEMBER_IN_CONCERN:
				sequence_MemberInConcern(context, (MemberInConcern) semanticObject); 
				return; 
			case BurstPackage.PACKAGE:
				sequence_Package(context, (org.xtext.burst.burst.Package) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AbstractElement returns Concern
	 *     Concern returns Concern
	 *
	 * Constraint:
	 *     (name=ID supertype=[Concern|QualifiedName]? (members+=Member | intersections+=Intersection)*)
	 */
	protected void sequence_Concern(ISerializationContext context, Concern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     File returns File
	 *
	 * Constraint:
	 *     elements+=AbstractElement+
	 */
	protected void sequence_File(ISerializationContext context, File semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Import
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedName
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Intersection
	 *     Intersection returns Intersection
	 *
	 * Constraint:
	 *     (name='when' members+=Member* linesContent+=Line*)
	 */
	protected void sequence_Intersection(ISerializationContext context, Intersection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Line returns Line
	 *
	 * Constraint:
	 *     ((called+=MemberCall | called2+=MemberInConcern)* name=';')
	 */
	protected void sequence_Line(ISerializationContext context, Line semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MemberCall returns MemberCall
	 *
	 * Constraint:
	 *     name=[Member|ID]
	 */
	protected void sequence_MemberCall(ISerializationContext context, MemberCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.MEMBER_CALL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.MEMBER_CALL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMemberCallAccess().getNameMemberIDTerminalRuleCall_1_0_1(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MemberInConcern returns MemberInConcern
	 *
	 * Constraint:
	 *     (target=[Concern|ID] name=ID)
	 */
	protected void sequence_MemberInConcern(ISerializationContext context, MemberInConcern semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.MEMBER_IN_CONCERN__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.MEMBER_IN_CONCERN__TARGET));
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.MEMBER_IN_CONCERN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.MEMBER_IN_CONCERN__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMemberInConcernAccess().getTargetConcernIDTerminalRuleCall_1_0_1(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getMemberInConcernAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Member returns Member
	 *
	 * Constraint:
	 *     (concern=[Concern|QualifiedName] name=ID)
	 */
	protected void sequence_Member(ISerializationContext context, Member semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.MEMBER__CONCERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.MEMBER__CONCERN));
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.MEMBER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.MEMBER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMemberAccess().getConcernConcernQualifiedNameParserRuleCall_1_0_1(), semanticObject.getConcern());
		feeder.accept(grammarAccess.getMemberAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Package
	 *     Package returns Package
	 *
	 * Constraint:
	 *     (name=QualifiedName elements+=AbstractElement*)
	 */
	protected void sequence_Package(ISerializationContext context, org.xtext.burst.burst.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
