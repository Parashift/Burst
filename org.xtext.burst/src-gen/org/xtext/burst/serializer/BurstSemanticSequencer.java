/*
 * generated by Xtext 2.10.0
 */
package org.xtext.burst.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.burst.burst.Access;
import org.xtext.burst.burst.BurstPackage;
import org.xtext.burst.burst.CallExpr;
import org.xtext.burst.burst.Concern;
import org.xtext.burst.burst.File;
import org.xtext.burst.burst.Import;
import org.xtext.burst.burst.Intersection;
import org.xtext.burst.burst.Locale;
import org.xtext.burst.burst.Member;
import org.xtext.burst.burst.Role;
import org.xtext.burst.burst.SubCall;
import org.xtext.burst.burst.Template;
import org.xtext.burst.burst.WithParameter;
import org.xtext.burst.services.BurstGrammarAccess;

@SuppressWarnings("all")
public class BurstSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BurstGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BurstPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BurstPackage.ACCESS:
				sequence_Access(context, (Access) semanticObject); 
				return; 
			case BurstPackage.CALL_EXPR:
				sequence_CallExpr(context, (CallExpr) semanticObject); 
				return; 
			case BurstPackage.CONCERN:
				sequence_Concern(context, (Concern) semanticObject); 
				return; 
			case BurstPackage.FILE:
				sequence_File(context, (File) semanticObject); 
				return; 
			case BurstPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case BurstPackage.INTERSECTION:
				sequence_RuleIntersect(context, (Intersection) semanticObject); 
				return; 
			case BurstPackage.LOCALE:
				sequence_Locale(context, (Locale) semanticObject); 
				return; 
			case BurstPackage.MEMBER:
				sequence_Member(context, (Member) semanticObject); 
				return; 
			case BurstPackage.PACKAGE:
				sequence_Package(context, (org.xtext.burst.burst.Package) semanticObject); 
				return; 
			case BurstPackage.PARAMETER:
				sequence_Parameter(context, (org.xtext.burst.burst.Parameter) semanticObject); 
				return; 
			case BurstPackage.ROLE:
				sequence_Roles(context, (Role) semanticObject); 
				return; 
			case BurstPackage.SUB_CALL:
				sequence_SubCall(context, (SubCall) semanticObject); 
				return; 
			case BurstPackage.TEMPLATE:
				sequence_Template(context, (Template) semanticObject); 
				return; 
			case BurstPackage.WITH_PARAMETER:
				sequence_WithParameter(context, (WithParameter) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Call returns Access
	 *     Access returns Access
	 *
	 * Constraint:
	 *     (name=[Variable|ID] members+=[Member|ID]* role=[Role|ID]?)
	 */
	protected void sequence_Access(ISerializationContext context, Access semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Line returns CallExpr
	 *     CallExpr returns CallExpr
	 *
	 * Constraint:
	 *     (content+=Call+ (equality?='=' source+=Call+)?)
	 */
	protected void sequence_CallExpr(ISerializationContext context, CallExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageElement returns Concern
	 *     Concern returns Concern
	 *     Variable returns Concern
	 *
	 * Constraint:
	 *     (name=ID elements+=ConcernElement*)
	 */
	protected void sequence_Concern(ISerializationContext context, Concern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     File returns File
	 *
	 * Constraint:
	 *     (Imports+=Import* elements+=FileElement*)
	 */
	protected void sequence_File(ISerializationContext context, File semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedName
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameParserRuleCall_2_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Locale returns Locale
	 *     Variable returns Locale
	 *     Call returns Locale
	 *
	 * Constraint:
	 *     (type=[Concern|QualifiedName] name=ID)
	 */
	protected void sequence_Locale(ISerializationContext context, Locale semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.LOCALE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.LOCALE__TYPE));
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.LOCALE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.LOCALE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocaleAccess().getTypeConcernQualifiedNameParserRuleCall_2_0_1(), semanticObject.getType());
		feeder.accept(grammarAccess.getLocaleAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConcernElement returns Member
	 *     Member returns Member
	 *     Variable returns Member
	 *
	 * Constraint:
	 *     (heritFrom?='is'? concern=[Concern|QualifiedName] name=ID)
	 */
	protected void sequence_Member(ISerializationContext context, Member semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FileElement returns Package
	 *     Package returns Package
	 *
	 * Constraint:
	 *     (name=QualifiedName elements+=PackageElement*)
	 */
	protected void sequence_Package(ISerializationContext context, org.xtext.burst.burst.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *     Variable returns Parameter
	 *
	 * Constraint:
	 *     (type=[Concern|QualifiedName] name=ID (usage?=':' role=[Role|ID])?)
	 */
	protected void sequence_Parameter(ISerializationContext context, org.xtext.burst.burst.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FileElement returns Role
	 *     Roles returns Role
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Roles(ISerializationContext context, Role semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.ROLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.ROLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRolesAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackageElement returns Intersection
	 *     ConcernElement returns Intersection
	 *     RuleIntersect returns Intersection
	 *
	 * Constraint:
	 *     (name='when' params+=Parameter params+=Parameter* (params+=WithParameter params+=WithParameter*)? lines+=Line*)
	 */
	protected void sequence_RuleIntersect(ISerializationContext context, Intersection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubCall returns SubCall
	 *     Call returns SubCall
	 *
	 * Constraint:
	 *     name=CallExpr
	 */
	protected void sequence_SubCall(ISerializationContext context, SubCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BurstPackage.Literals.SUB_CALL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BurstPackage.Literals.SUB_CALL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubCallAccess().getNameCallExprParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackageElement returns Template
	 *     Template returns Template
	 *
	 * Constraint:
	 *     (name=ID templateArguments+=[Concern|ID] templateArguments+=[Concern|ID]* elements+=ConcernElement*)
	 */
	protected void sequence_Template(ISerializationContext context, Template semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WithParameter returns WithParameter
	 *     Variable returns WithParameter
	 *
	 * Constraint:
	 *     (name=[Concern|QualifiedName] (usage?=':' role=[Role|ID])?)
	 */
	protected void sequence_WithParameter(ISerializationContext context, WithParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
