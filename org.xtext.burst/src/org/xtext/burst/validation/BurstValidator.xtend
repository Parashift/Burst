/*
 * generated by Xtext 2.11.0
 */
package org.xtext.burst.validation

import java.util.ArrayList
import java.util.HashSet
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check
import org.xtext.burst.burst.BurstPackage
import org.xtext.burst.burst.Concern
import org.xtext.burst.burst.Member
import org.xtext.burst.burst.File
import com.google.common.collect.HashMultimap
import org.eclipse.xtend.lib.macro.declaration.NamedElement
import org.xtext.burst.burst.Variable
import org.xtext.burst.burst.Parameter
import org.xtext.burst.burst.BPackage

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class BurstValidator extends AbstractBurstValidator {
	
	extension ConcernExtensions c = new ConcernExtensions ();
	
	public static val ISSUE_CODE_PREFIX = "org.burst."
	public static val DUPLICATE_ELEMENT = ISSUE_CODE_PREFIX + "DUPLICATE_ELEMENT"
	public static val HIERARCHY_CYCLE =  ISSUE_CODE_PREFIX + "HIERARCHY_CYCLE"
	public static val BAD_NAME =  ISSUE_CODE_PREFIX + "BAD_NAME"
	
	@Check
	def checkNoCycleInConcernHierachy(Member m) {
		val list = newHashSet()
		checkNoCycleInConcern(m.concern, list)
	}
		
	@Check
	def checkNoDuplicate(File f) {
		
		val multiMap = HashMultimap.create()
		for(p :f.package) {
			p.setVariablesInMap(multiMap)
			for( v: p.variables){
				v.fullfill(multiMap)
				multiMap.put(v.name,v)
			}		
			for(entry: multiMap.asMap.entrySet) {
				val duplicates = entry.value 
				if(duplicates.size>1) {
					for(d : duplicates) {
						error("Duplicate "+d.eClass.name+ " '"+ d.name+"'", d, BurstPackage.eINSTANCE.variable_Name, DUPLICATE_ELEMENT)
					}
				}
			}
		}
	}
	
	
	def void fullfill(Variable variable, HashMultimap<String, Variable> multimap) {
		
	}
	
	
	/**
	 * We have to find how to use a "variable type" to generalize elements
	 */
	def checkNoDuplicateElements(HashMultimap<String, Variable> multiMap , List<? extends Variable> variables) {
		var c = null
		for(e : variables) {
			multiMap.put(e.name,e)
			for(entry: multiMap.asMap.entrySet) {
				val duplicates = entry.value 
				if(duplicates.size>1) {
					for(d : duplicates) {
						error("Duplicate "+d.eClass.name+ " '"+ d.name+"'", d, BurstPackage.eINSTANCE.variable_Name, DUPLICATE_ELEMENT)
					}
				}
			}
			switch(e) {
				case Concern:
				 checkNoDuplicateElements(multiMap , (e as Concern).members)
				
			}
		}
	}
	
	@Check
	def void checkNoCycleInConcern(Concern c, HashSet<Concern> list) {
		for(Member m : c.members) {
			if(m.isContent) {
				if(list.contains(m.concern)) {
					error("Cycle in hierarchy of entity "+ m.concern.name, BurstPackage.Literals.MEMBER__CONCERN, HIERARCHY_CYCLE)
					return
				} else {
					val listUp = newHashSet(m.concern)
					listUp.addAll(list)
					checkNoCycleInConcern(m.concern, listUp)
				}
			}
		}
		return
	}
	
	@Check
	def void oneNameParameterAreConcerns(Parameter p) {
		if(p.type == null) {
			var obj =  p as EObject
			while(obj.eContainer !== null && !(obj.eContainer instanceof File)) {
				obj = obj.eContainer
			}
			if(obj.eContainer instanceof File) {
				val f = obj.eContainer as File
				for(c : f.concerns) {
					if(p.name != null && p.name.equals(c.name)) {
						return
					}
				}
				error("Couldn't resolve reference to Concern '"+ p.name +"'.", BurstPackage.Literals.PARAMETER__TYPE, BAD_NAME)
				return
			}
			error("Parameter "+ p.name + " has no file linked", BurstPackage.Literals.PARAMETER__TYPE, BAD_NAME)
			return
		}
	}
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					BurstPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
}

