/*
 * generated by Xtext 2.9.0
 */
package org.xtext.burst.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.burst.ide.contentassist.antlr.internal.InternalBurstParser;
import org.xtext.burst.services.BurstGrammarAccess;

public class BurstParser extends AbstractContentAssistParser {

	@Inject
	private BurstGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalBurstParser createParser() {
		InternalBurstParser result = new InternalBurstParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
					put(grammarAccess.getConcernAccess().getAlternatives_6_2(), "rule__Concern__Alternatives_6_2");
					put(grammarAccess.getCallAccess().getAlternatives(), "rule__Call__Alternatives");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getConcernAccess().getGroup(), "rule__Concern__Group__0");
					put(grammarAccess.getConcernAccess().getGroup_5(), "rule__Concern__Group_5__0");
					put(grammarAccess.getConcernAccess().getGroup_6(), "rule__Concern__Group_6__0");
					put(grammarAccess.getDestructAccess().getGroup(), "rule__Destruct__Group__0");
					put(grammarAccess.getBuildAccess().getGroup(), "rule__Build__Group__0");
					put(grammarAccess.getMemberAccess().getGroup(), "rule__Member__Group__0");
					put(grammarAccess.getIntersectionAccess().getGroup(), "rule__Intersection__Group__0");
					put(grammarAccess.getLineAccess().getGroup(), "rule__Line__Group__0");
					put(grammarAccess.getCallAccess().getGroup_0(), "rule__Call__Group_0__0");
					put(grammarAccess.getMemberCallAccess().getGroup(), "rule__MemberCall__Group__0");
					put(grammarAccess.getMemberInConcernAccess().getGroup(), "rule__MemberInConcern__Group__0");
					put(grammarAccess.getFileAccess().getElementsAssignment(), "rule__File__ElementsAssignment");
					put(grammarAccess.getPackageAccess().getNameAssignment_1(), "rule__Package__NameAssignment_1");
					put(grammarAccess.getPackageAccess().getElementsAssignment_3(), "rule__Package__ElementsAssignment_3");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getConcernAccess().getNameAssignment_3(), "rule__Concern__NameAssignment_3");
					put(grammarAccess.getConcernAccess().getSupertypeAssignment_5_2(), "rule__Concern__SupertypeAssignment_5_2");
					put(grammarAccess.getConcernAccess().getMembersAssignment_6_2_0(), "rule__Concern__MembersAssignment_6_2_0");
					put(grammarAccess.getConcernAccess().getIntersectionsAssignment_6_2_1(), "rule__Concern__IntersectionsAssignment_6_2_1");
					put(grammarAccess.getDestructAccess().getNameAssignment_1(), "rule__Destruct__NameAssignment_1");
					put(grammarAccess.getDestructAccess().getLinesContentAssignment_3(), "rule__Destruct__LinesContentAssignment_3");
					put(grammarAccess.getBuildAccess().getNameAssignment_1(), "rule__Build__NameAssignment_1");
					put(grammarAccess.getBuildAccess().getLinesContentAssignment_3(), "rule__Build__LinesContentAssignment_3");
					put(grammarAccess.getMemberAccess().getConcernAssignment_1(), "rule__Member__ConcernAssignment_1");
					put(grammarAccess.getMemberAccess().getNameAssignment_3(), "rule__Member__NameAssignment_3");
					put(grammarAccess.getIntersectionAccess().getNameAssignment_1(), "rule__Intersection__NameAssignment_1");
					put(grammarAccess.getIntersectionAccess().getMembersAssignment_3(), "rule__Intersection__MembersAssignment_3");
					put(grammarAccess.getIntersectionAccess().getLinesContentAssignment_6(), "rule__Intersection__LinesContentAssignment_6");
					put(grammarAccess.getLineAccess().getFirstAssignment_0(), "rule__Line__FirstAssignment_0");
					put(grammarAccess.getLineAccess().getListAssignment_1(), "rule__Line__ListAssignment_1");
					put(grammarAccess.getCallAccess().getNameAssignment_0_1(), "rule__Call__NameAssignment_0_1");
					put(grammarAccess.getCallAccess().getNameAssignment_1(), "rule__Call__NameAssignment_1");
					put(grammarAccess.getMemberCallAccess().getNameAssignment_1(), "rule__MemberCall__NameAssignment_1");
					put(grammarAccess.getMemberInConcernAccess().getTargetAssignment_1(), "rule__MemberInConcern__TargetAssignment_1");
					put(grammarAccess.getMemberInConcernAccess().getNameAssignment_3(), "rule__MemberInConcern__NameAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalBurstParser typedParser = (InternalBurstParser) parser;
			typedParser.entryRuleFile();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BurstGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BurstGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
