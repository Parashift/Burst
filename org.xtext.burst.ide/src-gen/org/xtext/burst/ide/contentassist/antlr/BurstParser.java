/*
 * generated by Xtext 2.9.0
 */
package org.xtext.burst.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.burst.ide.contentassist.antlr.internal.InternalBurstParser;
import org.xtext.burst.services.BurstGrammarAccess;

public class BurstParser extends AbstractContentAssistParser {

	@Inject
	private BurstGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalBurstParser createParser() {
		InternalBurstParser result = new InternalBurstParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRuleFileElementAccess().getAlternatives(), "rule__RuleFileElement__Alternatives");
					put(grammarAccess.getPackageElementAccess().getAlternatives(), "rule__PackageElement__Alternatives");
					put(grammarAccess.getConcernElementAccess().getAlternatives(), "rule__ConcernElement__Alternatives");
					put(grammarAccess.getRuleIntersectAccess().getAlternatives_2_2(), "rule__RuleIntersect__Alternatives_2_2");
					put(grammarAccess.getIntersectionElementAccess().getAlternatives(), "rule__IntersectionElement__Alternatives");
					put(grammarAccess.getCallAccess().getAlternatives(), "rule__Call__Alternatives");
					put(grammarAccess.getRuleImportAccess().getGroup(), "rule__RuleImport__Group__0");
					put(grammarAccess.getRulePackageAccess().getGroup(), "rule__RulePackage__Group__0");
					put(grammarAccess.getRuleConcernAccess().getGroup(), "rule__RuleConcern__Group__0");
					put(grammarAccess.getRuleConcernAccess().getGroup_3(), "rule__RuleConcern__Group_3__0");
					put(grammarAccess.getRuleConcernAccess().getGroup_4(), "rule__RuleConcern__Group_4__0");
					put(grammarAccess.getDeclareMemberAccess().getGroup(), "rule__DeclareMember__Group__0");
					put(grammarAccess.getRuleIntersectAccess().getGroup(), "rule__RuleIntersect__Group__0");
					put(grammarAccess.getRuleIntersectAccess().getGroup_2(), "rule__RuleIntersect__Group_2__0");
					put(grammarAccess.getConcernParameterAccess().getGroup(), "rule__ConcernParameter__Group__0");
					put(grammarAccess.getRenamedParameterAccess().getGroup(), "rule__RenamedParameter__Group__0");
					put(grammarAccess.getLineAccess().getGroup(), "rule__Line__Group__0");
					put(grammarAccess.getTotoAccess().getGroup(), "rule__Toto__Group__0");
					put(grammarAccess.getRenamedParameterCallAccess().getGroup(), "rule__RenamedParameterCall__Group__0");
					put(grammarAccess.getConcernParameterCallAccess().getGroup(), "rule__ConcernParameterCall__Group__0");
					put(grammarAccess.getMemberCallAccess().getGroup(), "rule__MemberCall__Group__0");
					put(grammarAccess.getMemberInConcernAccess().getGroup(), "rule__MemberInConcern__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getFileAccess().getElementsAssignment(), "rule__File__ElementsAssignment");
					put(grammarAccess.getRuleImportAccess().getImportedNamespaceAssignment_2(), "rule__RuleImport__ImportedNamespaceAssignment_2");
					put(grammarAccess.getRulePackageAccess().getNameAssignment_2(), "rule__RulePackage__NameAssignment_2");
					put(grammarAccess.getRulePackageAccess().getElementsAssignment_5(), "rule__RulePackage__ElementsAssignment_5");
					put(grammarAccess.getRuleConcernAccess().getNameAssignment_2(), "rule__RuleConcern__NameAssignment_2");
					put(grammarAccess.getRuleConcernAccess().getSupertypeAssignment_3_3(), "rule__RuleConcern__SupertypeAssignment_3_3");
					put(grammarAccess.getRuleConcernAccess().getElementsAssignment_4_1(), "rule__RuleConcern__ElementsAssignment_4_1");
					put(grammarAccess.getDeclareMemberAccess().getConcernAssignment_1(), "rule__DeclareMember__ConcernAssignment_1");
					put(grammarAccess.getDeclareMemberAccess().getNameAssignment_2(), "rule__DeclareMember__NameAssignment_2");
					put(grammarAccess.getRuleIntersectAccess().getNameAssignment_1(), "rule__RuleIntersect__NameAssignment_1");
					put(grammarAccess.getRuleIntersectAccess().getParametersAssignment_2_1(), "rule__RuleIntersect__ParametersAssignment_2_1");
					put(grammarAccess.getRuleIntersectAccess().getLinesAssignment_4(), "rule__RuleIntersect__LinesAssignment_4");
					put(grammarAccess.getConcernParameterAccess().getNameAssignment_1(), "rule__ConcernParameter__NameAssignment_1");
					put(grammarAccess.getRenamedParameterAccess().getConcernAssignment_1(), "rule__RenamedParameter__ConcernAssignment_1");
					put(grammarAccess.getRenamedParameterAccess().getNameAssignment_2(), "rule__RenamedParameter__NameAssignment_2");
					put(grammarAccess.getLineAccess().getCallsAssignment_1(), "rule__Line__CallsAssignment_1");
					put(grammarAccess.getLineAccess().getCallsAssignment_2(), "rule__Line__CallsAssignment_2");
					put(grammarAccess.getTotoAccess().getNameAssignment_1(), "rule__Toto__NameAssignment_1");
					put(grammarAccess.getRenamedParameterCallAccess().getNameAssignment_1(), "rule__RenamedParameterCall__NameAssignment_1");
					put(grammarAccess.getConcernParameterCallAccess().getNameAssignment_1(), "rule__ConcernParameterCall__NameAssignment_1");
					put(grammarAccess.getMemberCallAccess().getNameAssignment_1(), "rule__MemberCall__NameAssignment_1");
					put(grammarAccess.getMemberInConcernAccess().getTargetAssignment_1(), "rule__MemberInConcern__TargetAssignment_1");
					put(grammarAccess.getMemberInConcernAccess().getNameAssignment_3(), "rule__MemberInConcern__NameAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalBurstParser typedParser = (InternalBurstParser) parser;
			typedParser.entryRuleFile();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BurstGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BurstGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
