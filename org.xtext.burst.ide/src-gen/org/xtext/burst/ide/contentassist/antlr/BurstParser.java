/*
 * generated by Xtext 2.9.0
 */
package org.xtext.burst.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.burst.ide.contentassist.antlr.internal.InternalBurstParser;
import org.xtext.burst.services.BurstGrammarAccess;

public class BurstParser extends AbstractContentAssistParser {

	@Inject
	private BurstGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalBurstParser createParser() {
		InternalBurstParser result = new InternalBurstParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFileAccess().getAlternatives_1(), "rule__File__Alternatives_1");
					put(grammarAccess.getConcernAccess().getAlternatives_5(), "rule__Concern__Alternatives_5");
					put(grammarAccess.getQualifierAccess().getAlternatives(), "rule__Qualifier__Alternatives");
					put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getConcernAccess().getGroup(), "rule__Concern__Group__0");
					put(grammarAccess.getConcernAccess().getGroup_3(), "rule__Concern__Group_3__0");
					put(grammarAccess.getMemberAccess().getGroup(), "rule__Member__Group__0");
					put(grammarAccess.getIntersectionAccess().getGroup(), "rule__Intersection__Group__0");
					put(grammarAccess.getLineAccess().getGroup(), "rule__Line__Group__0");
					put(grammarAccess.getQualifierAccess().getGroup_0(), "rule__Qualifier__Group_0__0");
					put(grammarAccess.getFileAccess().getImportsAssignment_0(), "rule__File__ImportsAssignment_0");
					put(grammarAccess.getFileAccess().getConcernsAssignment_1_0(), "rule__File__ConcernsAssignment_1_0");
					put(grammarAccess.getFileAccess().getExternIntersectionsAssignment_1_1(), "rule__File__ExternIntersectionsAssignment_1_1");
					put(grammarAccess.getImportAccess().getNameAssignment_2(), "rule__Import__NameAssignment_2");
					put(grammarAccess.getConcernAccess().getNameAssignment_2(), "rule__Concern__NameAssignment_2");
					put(grammarAccess.getConcernAccess().getSupertypeAssignment_3_1(), "rule__Concern__SupertypeAssignment_3_1");
					put(grammarAccess.getConcernAccess().getMembersAssignment_5_0(), "rule__Concern__MembersAssignment_5_0");
					put(grammarAccess.getConcernAccess().getIntersectionsAssignment_5_1(), "rule__Concern__IntersectionsAssignment_5_1");
					put(grammarAccess.getMemberAccess().getNameAssignment_2(), "rule__Member__NameAssignment_2");
					put(grammarAccess.getIntersectionAccess().getQualifiersAssignment_2(), "rule__Intersection__QualifiersAssignment_2");
					put(grammarAccess.getIntersectionAccess().getLinesContentAssignment_4(), "rule__Intersection__LinesContentAssignment_4");
					put(grammarAccess.getLineAccess().getCalledAssignment_2(), "rule__Line__CalledAssignment_2");
					put(grammarAccess.getQualifierAccess().getNameAssignment_0_1(), "rule__Qualifier__NameAssignment_0_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalBurstParser typedParser = (InternalBurstParser) parser;
			typedParser.entryRuleFile();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BurstGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BurstGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
