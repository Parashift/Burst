/*
 * generated by Xtext 2.9.0
 */
grammar InternalBurst;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.burst.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.burst.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.burst.services.BurstGrammarAccess;

}
@parser::members {
	private BurstGrammarAccess grammarAccess;

	public void setGrammarAccess(BurstGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleFile
entryRuleFile
:
{ before(grammarAccess.getFileRule()); }
	 ruleFile
{ after(grammarAccess.getFileRule()); } 
	 EOF 
;

// Rule File
ruleFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFileAccess().getElementsAssignment()); }
		(rule__File__ElementsAssignment)*
		{ after(grammarAccess.getFileAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleFileElement
entryRuleRuleFileElement
:
{ before(grammarAccess.getRuleFileElementRule()); }
	 ruleRuleFileElement
{ after(grammarAccess.getRuleFileElementRule()); } 
	 EOF 
;

// Rule RuleFileElement
ruleRuleFileElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleFileElementAccess().getAlternatives()); }
		(rule__RuleFileElement__Alternatives)
		{ after(grammarAccess.getRuleFileElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleImport
entryRuleRuleImport
:
{ before(grammarAccess.getRuleImportRule()); }
	 ruleRuleImport
{ after(grammarAccess.getRuleImportRule()); } 
	 EOF 
;

// Rule RuleImport
ruleRuleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleImportAccess().getGroup()); }
		(rule__RuleImport__Group__0)
		{ after(grammarAccess.getRuleImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRulePackage
entryRuleRulePackage
:
{ before(grammarAccess.getRulePackageRule()); }
	 ruleRulePackage
{ after(grammarAccess.getRulePackageRule()); } 
	 EOF 
;

// Rule RulePackage
ruleRulePackage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRulePackageAccess().getGroup()); }
		(rule__RulePackage__Group__0)
		{ after(grammarAccess.getRulePackageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePackageElement
entryRulePackageElement
:
{ before(grammarAccess.getPackageElementRule()); }
	 rulePackageElement
{ after(grammarAccess.getPackageElementRule()); } 
	 EOF 
;

// Rule PackageElement
rulePackageElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPackageElementAccess().getAlternatives()); }
		(rule__PackageElement__Alternatives)
		{ after(grammarAccess.getPackageElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleConcern
entryRuleRuleConcern
:
{ before(grammarAccess.getRuleConcernRule()); }
	 ruleRuleConcern
{ after(grammarAccess.getRuleConcernRule()); } 
	 EOF 
;

// Rule RuleConcern
ruleRuleConcern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleConcernAccess().getGroup()); }
		(rule__RuleConcern__Group__0)
		{ after(grammarAccess.getRuleConcernAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConcernElement
entryRuleConcernElement
:
{ before(grammarAccess.getConcernElementRule()); }
	 ruleConcernElement
{ after(grammarAccess.getConcernElementRule()); } 
	 EOF 
;

// Rule ConcernElement
ruleConcernElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConcernElementAccess().getAlternatives()); }
		(rule__ConcernElement__Alternatives)
		{ after(grammarAccess.getConcernElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclareMember
entryRuleDeclareMember
:
{ before(grammarAccess.getDeclareMemberRule()); }
	 ruleDeclareMember
{ after(grammarAccess.getDeclareMemberRule()); } 
	 EOF 
;

// Rule DeclareMember
ruleDeclareMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclareMemberAccess().getGroup()); }
		(rule__DeclareMember__Group__0)
		{ after(grammarAccess.getDeclareMemberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleIntersect
entryRuleRuleIntersect
:
{ before(grammarAccess.getRuleIntersectRule()); }
	 ruleRuleIntersect
{ after(grammarAccess.getRuleIntersectRule()); } 
	 EOF 
;

// Rule RuleIntersect
ruleRuleIntersect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleIntersectAccess().getGroup()); }
		(rule__RuleIntersect__Group__0)
		{ after(grammarAccess.getRuleIntersectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclareParameter
entryRuleDeclareParameter
:
{ before(grammarAccess.getDeclareParameterRule()); }
	 ruleDeclareParameter
{ after(grammarAccess.getDeclareParameterRule()); } 
	 EOF 
;

// Rule DeclareParameter
ruleDeclareParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclareParameterAccess().getRenamedParameterParserRuleCall()); }
		ruleRenamedParameter
		{ after(grammarAccess.getDeclareParameterAccess().getRenamedParameterParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRenamedParameter
entryRuleRenamedParameter
:
{ before(grammarAccess.getRenamedParameterRule()); }
	 ruleRenamedParameter
{ after(grammarAccess.getRenamedParameterRule()); } 
	 EOF 
;

// Rule RenamedParameter
ruleRenamedParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRenamedParameterAccess().getGroup()); }
		(rule__RenamedParameter__Group__0)
		{ after(grammarAccess.getRenamedParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntersectionElement
entryRuleIntersectionElement
:
{ before(grammarAccess.getIntersectionElementRule()); }
	 ruleIntersectionElement
{ after(grammarAccess.getIntersectionElementRule()); } 
	 EOF 
;

// Rule IntersectionElement
ruleIntersectionElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntersectionElementAccess().getAlternatives()); }
		(rule__IntersectionElement__Alternatives)
		{ after(grammarAccess.getIntersectionElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLine
entryRuleLine
:
{ before(grammarAccess.getLineRule()); }
	 ruleLine
{ after(grammarAccess.getLineRule()); } 
	 EOF 
;

// Rule Line
ruleLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLineAccess().getGroup()); }
		(rule__Line__Group__0)
		{ after(grammarAccess.getLineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCall
entryRuleCall
:
{ before(grammarAccess.getCallRule()); }
	 ruleCall
{ after(grammarAccess.getCallRule()); } 
	 EOF 
;

// Rule Call
ruleCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCallAccess().getAlternatives()); }
		(rule__Call__Alternatives)
		{ after(grammarAccess.getCallAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletoto
entryRuletoto
:
{ before(grammarAccess.getTotoRule()); }
	 ruletoto
{ after(grammarAccess.getTotoRule()); } 
	 EOF 
;

// Rule toto
ruletoto 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTotoAccess().getGroup()); }
		(rule__Toto__Group__0)
		{ after(grammarAccess.getTotoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRenamedParameterCall
entryRuleRenamedParameterCall
:
{ before(grammarAccess.getRenamedParameterCallRule()); }
	 ruleRenamedParameterCall
{ after(grammarAccess.getRenamedParameterCallRule()); } 
	 EOF 
;

// Rule RenamedParameterCall
ruleRenamedParameterCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRenamedParameterCallAccess().getGroup()); }
		(rule__RenamedParameterCall__Group__0)
		{ after(grammarAccess.getRenamedParameterCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleFileElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleFileElementAccess().getRuleImportParserRuleCall_0()); }
		ruleRuleImport
		{ after(grammarAccess.getRuleFileElementAccess().getRuleImportParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRuleFileElementAccess().getRulePackageParserRuleCall_1()); }
		ruleRulePackage
		{ after(grammarAccess.getRuleFileElementAccess().getRulePackageParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRuleFileElementAccess().getENDLINETerminalRuleCall_2()); }
		RULE_ENDLINE
		{ after(grammarAccess.getRuleFileElementAccess().getENDLINETerminalRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageElementAccess().getRuleConcernParserRuleCall_0()); }
		ruleRuleConcern
		{ after(grammarAccess.getPackageElementAccess().getRuleConcernParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPackageElementAccess().getRuleIntersectParserRuleCall_1()); }
		ruleRuleIntersect
		{ after(grammarAccess.getPackageElementAccess().getRuleIntersectParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPackageElementAccess().getENDLINETerminalRuleCall_2()); }
		RULE_ENDLINE
		{ after(grammarAccess.getPackageElementAccess().getENDLINETerminalRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcernElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConcernElementAccess().getDeclareMemberParserRuleCall_0()); }
		ruleDeclareMember
		{ after(grammarAccess.getConcernElementAccess().getDeclareMemberParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConcernElementAccess().getRuleIntersectParserRuleCall_1()); }
		ruleRuleIntersect
		{ after(grammarAccess.getConcernElementAccess().getRuleIntersectParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getConcernElementAccess().getENDLINETerminalRuleCall_2()); }
		RULE_ENDLINE
		{ after(grammarAccess.getConcernElementAccess().getENDLINETerminalRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Alternatives_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleIntersectAccess().getCommaKeyword_2_2_0()); }
		','
		{ after(grammarAccess.getRuleIntersectAccess().getCommaKeyword_2_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getRuleIntersectAccess().getAndKeyword_2_2_1()); }
		'and'
		{ after(grammarAccess.getRuleIntersectAccess().getAndKeyword_2_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectionElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntersectionElementAccess().getLineParserRuleCall_0()); }
		ruleLine
		{ after(grammarAccess.getIntersectionElementAccess().getLineParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getIntersectionElementAccess().getENDLINETerminalRuleCall_1()); }
		RULE_ENDLINE
		{ after(grammarAccess.getIntersectionElementAccess().getENDLINETerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallAccess().getTotoParserRuleCall_0()); }
		ruletoto
		{ after(grammarAccess.getCallAccess().getTotoParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCallAccess().getRenamedParameterCallParserRuleCall_1()); }
		ruleRenamedParameterCall
		{ after(grammarAccess.getCallAccess().getRenamedParameterCallParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleImport__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleImport__Group__0__Impl
	rule__RuleImport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleImport__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleImportAccess().getImportAction_0()); }
	()
	{ after(grammarAccess.getRuleImportAccess().getImportAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleImport__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleImport__Group__1__Impl
	rule__RuleImport__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleImport__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleImportAccess().getImportKeyword_1()); }
	'import'
	{ after(grammarAccess.getRuleImportAccess().getImportKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleImport__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleImport__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleImport__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleImportAccess().getImportedNamespaceAssignment_2()); }
	(rule__RuleImport__ImportedNamespaceAssignment_2)
	{ after(grammarAccess.getRuleImportAccess().getImportedNamespaceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RulePackage__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RulePackage__Group__0__Impl
	rule__RulePackage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRulePackageAccess().getPackageAction_0()); }
	()
	{ after(grammarAccess.getRulePackageAccess().getPackageAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RulePackage__Group__1__Impl
	rule__RulePackage__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRulePackageAccess().getPackageKeyword_1()); }
	'package'
	{ after(grammarAccess.getRulePackageAccess().getPackageKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RulePackage__Group__2__Impl
	rule__RulePackage__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRulePackageAccess().getNameAssignment_2()); }
	(rule__RulePackage__NameAssignment_2)
	{ after(grammarAccess.getRulePackageAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RulePackage__Group__3__Impl
	rule__RulePackage__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRulePackageAccess().getENDLINETerminalRuleCall_3()); }
	(RULE_ENDLINE)*
	{ after(grammarAccess.getRulePackageAccess().getENDLINETerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RulePackage__Group__4__Impl
	rule__RulePackage__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRulePackageAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getRulePackageAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RulePackage__Group__5__Impl
	rule__RulePackage__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRulePackageAccess().getElementsAssignment_5()); }
	(rule__RulePackage__ElementsAssignment_5)*
	{ after(grammarAccess.getRulePackageAccess().getElementsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RulePackage__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRulePackageAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getRulePackageAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleConcern__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleConcern__Group__0__Impl
	rule__RuleConcern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleConcernAccess().getConcernAction_0()); }
	()
	{ after(grammarAccess.getRuleConcernAccess().getConcernAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleConcern__Group__1__Impl
	rule__RuleConcern__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleConcernAccess().getConcernKeyword_1()); }
	'concern'
	{ after(grammarAccess.getRuleConcernAccess().getConcernKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleConcern__Group__2__Impl
	rule__RuleConcern__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleConcernAccess().getNameAssignment_2()); }
	(rule__RuleConcern__NameAssignment_2)
	{ after(grammarAccess.getRuleConcernAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleConcern__Group__3__Impl
	rule__RuleConcern__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleConcernAccess().getGroup_3()); }
	(rule__RuleConcern__Group_3__0)?
	{ after(grammarAccess.getRuleConcernAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleConcern__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleConcernAccess().getGroup_4()); }
	(rule__RuleConcern__Group_4__0)?
	{ after(grammarAccess.getRuleConcernAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleConcern__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleConcern__Group_3__0__Impl
	rule__RuleConcern__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleConcernAccess().getENDLINETerminalRuleCall_3_0()); }
	(RULE_ENDLINE)*
	{ after(grammarAccess.getRuleConcernAccess().getENDLINETerminalRuleCall_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleConcern__Group_3__1__Impl
	rule__RuleConcern__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleConcernAccess().getExtendsKeyword_3_1()); }
	'extends'
	{ after(grammarAccess.getRuleConcernAccess().getExtendsKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleConcern__Group_3__2__Impl
	rule__RuleConcern__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleConcernAccess().getENDLINETerminalRuleCall_3_2()); }
	(RULE_ENDLINE)*
	{ after(grammarAccess.getRuleConcernAccess().getENDLINETerminalRuleCall_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleConcern__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleConcernAccess().getSupertypeAssignment_3_3()); }
	(rule__RuleConcern__SupertypeAssignment_3_3)
	{ after(grammarAccess.getRuleConcernAccess().getSupertypeAssignment_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleConcern__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleConcern__Group_4__0__Impl
	rule__RuleConcern__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleConcernAccess().getLeftCurlyBracketKeyword_4_0()); }
	'{'
	{ after(grammarAccess.getRuleConcernAccess().getLeftCurlyBracketKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleConcern__Group_4__1__Impl
	rule__RuleConcern__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleConcernAccess().getElementsAssignment_4_1()); }
	(rule__RuleConcern__ElementsAssignment_4_1)*
	{ after(grammarAccess.getRuleConcernAccess().getElementsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleConcern__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleConcernAccess().getRightCurlyBracketKeyword_4_2()); }
	'}'
	{ after(grammarAccess.getRuleConcernAccess().getRightCurlyBracketKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclareMember__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclareMember__Group__0__Impl
	rule__DeclareMember__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclareMember__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclareMemberAccess().getMemberAction_0()); }
	()
	{ after(grammarAccess.getDeclareMemberAccess().getMemberAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclareMember__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclareMember__Group__1__Impl
	rule__DeclareMember__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclareMember__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclareMemberAccess().getConcernAssignment_1()); }
	(rule__DeclareMember__ConcernAssignment_1)
	{ after(grammarAccess.getDeclareMemberAccess().getConcernAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclareMember__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclareMember__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclareMember__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclareMemberAccess().getNameAssignment_2()); }
	(rule__DeclareMember__NameAssignment_2)
	{ after(grammarAccess.getDeclareMemberAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleIntersect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleIntersect__Group__0__Impl
	rule__RuleIntersect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleIntersectAccess().getIntersectionAction_0()); }
	()
	{ after(grammarAccess.getRuleIntersectAccess().getIntersectionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleIntersect__Group__1__Impl
	rule__RuleIntersect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleIntersectAccess().getNameAssignment_1()); }
	(rule__RuleIntersect__NameAssignment_1)
	{ after(grammarAccess.getRuleIntersectAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleIntersect__Group__2__Impl
	rule__RuleIntersect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleIntersectAccess().getGroup_2()); }
	(rule__RuleIntersect__Group_2__0)*
	{ after(grammarAccess.getRuleIntersectAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleIntersect__Group__3__Impl
	rule__RuleIntersect__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleIntersectAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getRuleIntersectAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleIntersect__Group__4__Impl
	rule__RuleIntersect__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleIntersectAccess().getLinesAssignment_4()); }
	(rule__RuleIntersect__LinesAssignment_4)*
	{ after(grammarAccess.getRuleIntersectAccess().getLinesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleIntersect__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleIntersectAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getRuleIntersectAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleIntersect__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleIntersect__Group_2__0__Impl
	rule__RuleIntersect__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleIntersectAccess().getENDLINETerminalRuleCall_2_0()); }
	(RULE_ENDLINE)*
	{ after(grammarAccess.getRuleIntersectAccess().getENDLINETerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleIntersect__Group_2__1__Impl
	rule__RuleIntersect__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleIntersectAccess().getParametersAssignment_2_1()); }
	(rule__RuleIntersect__ParametersAssignment_2_1)
	{ after(grammarAccess.getRuleIntersectAccess().getParametersAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleIntersect__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleIntersectAccess().getAlternatives_2_2()); }
	(rule__RuleIntersect__Alternatives_2_2)?
	{ after(grammarAccess.getRuleIntersectAccess().getAlternatives_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RenamedParameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RenamedParameter__Group__0__Impl
	rule__RenamedParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RenamedParameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenamedParameterAccess().getRenamedParameterAction_0()); }
	()
	{ after(grammarAccess.getRenamedParameterAccess().getRenamedParameterAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RenamedParameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RenamedParameter__Group__1__Impl
	rule__RenamedParameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RenamedParameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenamedParameterAccess().getConcernAssignment_1()); }
	(rule__RenamedParameter__ConcernAssignment_1)
	{ after(grammarAccess.getRenamedParameterAccess().getConcernAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RenamedParameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RenamedParameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RenamedParameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenamedParameterAccess().getNameAssignment_2()); }
	(rule__RenamedParameter__NameAssignment_2)
	{ after(grammarAccess.getRenamedParameterAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Line__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Line__Group__0__Impl
	rule__Line__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineAccess().getLineAction_0()); }
	()
	{ after(grammarAccess.getLineAccess().getLineAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Line__Group__1__Impl
	rule__Line__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineAccess().getCallsAssignment_1()); }
	(rule__Line__CallsAssignment_1)
	{ after(grammarAccess.getLineAccess().getCallsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Line__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineAccess().getCallsAssignment_2()); }
	(rule__Line__CallsAssignment_2)*
	{ after(grammarAccess.getLineAccess().getCallsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Toto__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Toto__Group__0__Impl
	rule__Toto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Toto__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTotoAccess().getTotoAction_0()); }
	()
	{ after(grammarAccess.getTotoAccess().getTotoAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Toto__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Toto__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Toto__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTotoAccess().getNameAssignment_1()); }
	(rule__Toto__NameAssignment_1)
	{ after(grammarAccess.getTotoAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RenamedParameterCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RenamedParameterCall__Group__0__Impl
	rule__RenamedParameterCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RenamedParameterCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenamedParameterCallAccess().getRenamedParameterCallAction_0()); }
	()
	{ after(grammarAccess.getRenamedParameterCallAccess().getRenamedParameterCallAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RenamedParameterCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RenamedParameterCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RenamedParameterCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenamedParameterCallAccess().getNameAssignment_1()); }
	(rule__RenamedParameterCall__NameAssignment_1)
	{ after(grammarAccess.getRenamedParameterCallAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__File__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFileAccess().getElementsRuleFileElementParserRuleCall_0()); }
		ruleRuleFileElement
		{ after(grammarAccess.getFileAccess().getElementsRuleFileElementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleImport__ImportedNamespaceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleImportAccess().getImportedNamespaceQualifiedNameParserRuleCall_2_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getRuleImportAccess().getImportedNamespaceQualifiedNameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRulePackageAccess().getNameQualifiedNameParserRuleCall_2_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getRulePackageAccess().getNameQualifiedNameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePackage__ElementsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRulePackageAccess().getElementsPackageElementParserRuleCall_5_0()); }
		rulePackageElement
		{ after(grammarAccess.getRulePackageAccess().getElementsPackageElementParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleConcernAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getRuleConcernAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__SupertypeAssignment_3_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleConcernAccess().getSupertypeConcernCrossReference_3_3_0()); }
		(
			{ before(grammarAccess.getRuleConcernAccess().getSupertypeConcernQualifiedNameParserRuleCall_3_3_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getRuleConcernAccess().getSupertypeConcernQualifiedNameParserRuleCall_3_3_0_1()); }
		)
		{ after(grammarAccess.getRuleConcernAccess().getSupertypeConcernCrossReference_3_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConcern__ElementsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleConcernAccess().getElementsConcernElementParserRuleCall_4_1_0()); }
		ruleConcernElement
		{ after(grammarAccess.getRuleConcernAccess().getElementsConcernElementParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclareMember__ConcernAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclareMemberAccess().getConcernConcernCrossReference_1_0()); }
		(
			{ before(grammarAccess.getDeclareMemberAccess().getConcernConcernQualifiedNameParserRuleCall_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getDeclareMemberAccess().getConcernConcernQualifiedNameParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getDeclareMemberAccess().getConcernConcernCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclareMember__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclareMemberAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getDeclareMemberAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleIntersectAccess().getNameWhenKeyword_1_0()); }
		(
			{ before(grammarAccess.getRuleIntersectAccess().getNameWhenKeyword_1_0()); }
			'when'
			{ after(grammarAccess.getRuleIntersectAccess().getNameWhenKeyword_1_0()); }
		)
		{ after(grammarAccess.getRuleIntersectAccess().getNameWhenKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__ParametersAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleIntersectAccess().getParametersDeclareParameterParserRuleCall_2_1_0()); }
		ruleDeclareParameter
		{ after(grammarAccess.getRuleIntersectAccess().getParametersDeclareParameterParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleIntersect__LinesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleIntersectAccess().getLinesIntersectionElementParserRuleCall_4_0()); }
		ruleIntersectionElement
		{ after(grammarAccess.getRuleIntersectAccess().getLinesIntersectionElementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RenamedParameter__ConcernAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRenamedParameterAccess().getConcernConcernCrossReference_1_0()); }
		(
			{ before(grammarAccess.getRenamedParameterAccess().getConcernConcernQualifiedNameParserRuleCall_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getRenamedParameterAccess().getConcernConcernQualifiedNameParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getRenamedParameterAccess().getConcernConcernCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RenamedParameter__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRenamedParameterAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getRenamedParameterAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__CallsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineAccess().getCallsCallParserRuleCall_1_0()); }
		ruleCall
		{ after(grammarAccess.getLineAccess().getCallsCallParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__CallsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineAccess().getCallsCallParserRuleCall_2_0()); }
		ruleCall
		{ after(grammarAccess.getLineAccess().getCallsCallParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Toto__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTotoAccess().getNameTotoKeyword_1_0()); }
		(
			{ before(grammarAccess.getTotoAccess().getNameTotoKeyword_1_0()); }
			'toto'
			{ after(grammarAccess.getTotoAccess().getNameTotoKeyword_1_0()); }
		)
		{ after(grammarAccess.getTotoAccess().getNameTotoKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RenamedParameterCall__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRenamedParameterCallAccess().getNameRenamedParameterCrossReference_1_0()); }
		(
			{ before(grammarAccess.getRenamedParameterCallAccess().getNameRenamedParameterIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRenamedParameterCallAccess().getNameRenamedParameterIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getRenamedParameterCallAccess().getNameRenamedParameterCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t')+;

RULE_ENDLINE : '\r'? '\n';

RULE_ANY_OTHER : .;
