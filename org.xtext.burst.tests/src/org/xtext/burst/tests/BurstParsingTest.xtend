/*
 * generated by Xtext 2.11.0
 */
package org.xtext.burst.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.xtext.burst.burst.File

@RunWith(XtextRunner)
@InjectWith(BurstInjectorProvider)
class BurstParsingTest {
	@Inject
	ParseHelper<File> parseHelper
	

	@Test
	def void testHelloWorld() {
		val result = parseHelper.parse('''
			package HelloWorld {
				concern Start
				concern Print
				concern Program
				concern HelloWorld {
					when Start s{
						Print "HelloWorld"
					}
				}
			}''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	
	@Test
	def void testAllObjectTypeCanHaveTheSameName() {
		val result = parseHelper.parse('''
			package A {
				concern A {
					A A
					when A A {
						A A.A
					}
				}
			}''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void testAssertMemberAssociativity() {
		val result = parseHelper.parse('''
			package A {
				concern A {
					A A
					when A A {
						A A.A A.A.A	A.A.A.A
					}
				}
			}''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void testHasAllMembersType() {
		val result = parseHelper.parse('''
			package A {
				concern B1
				concern B2 {
					is B1 param1
					B1 param2
					as is B1 param3
					as B1 param4
				}
			}''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void testIf1() {
		val result = parseHelper.parse('''
			package A {
				concern B1
				concern B2 {
					B1 param1
					B1 param2
					B1 param3
					when B1 b {
						if false
							param1 param2
						else param3
						if false {
							param1 param2 
						}
						else param3
					}
				}
			}''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void testIf2() {
		val result = parseHelper.parse('''
			package A {
				concern B1
				concern B2 {
					B1 param1
					B1 param2
					B1 param3
					when B1 b {
						if false
							param1 param2
						else { param3
						}
						if false {
							param1 param2 
						}
						else 
						{ param3 }
					}
				}
			}''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
}
